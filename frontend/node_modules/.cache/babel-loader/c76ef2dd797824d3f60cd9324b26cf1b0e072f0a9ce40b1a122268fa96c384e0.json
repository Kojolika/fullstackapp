{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Modules\\\\AddLocationOptions\\\\AddLocationManual.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { useGetCountriesQuery, useGetCitiesQuery } from '../../Features/locations/locationApiSlice';\nimport SelectState from '../../Atoms/SelectState';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddLocationManual = props => {\n  _s();\n  const [country, setCountry] = useState();\n  const [state, setState] = useState();\n  const [city, setCity] = useState();\n  const {\n    data,\n    isSuccess\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\n  const optionsCountries = [];\n  countries.forEach(item => {\n    optionsCountries.push({\n      value: item.country,\n      label: item.country\n    });\n  });\n  const {\n    data: dataCities,\n    isSuccess: isSuccessCities\n  } = useGetCitiesQuery({\n    \"country\": country,\n    \"state\": state\n  });\n  const cities = isSuccessCities ? dataCities.data : [];\n  const optionsCities = [];\n  cities.forEach(item => {\n    optionsCities.push({\n      value: item.city,\n      label: item.city\n    });\n  });\n  const handleStateChange = state => {\n    setState(state);\n  };\n  const stateSelect = country ? /*#__PURE__*/_jsxDEV(SelectState, {\n    country: country,\n    setState: handleStateChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 35\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const citySelect = state ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCities,\n      onChange: newValue => setCity(newValue.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(country);\n        console.log(state);\n        console.log(city);\n      },\n      children: \"Check country var\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Country \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCountries,\n      onChange: newValue => {\n        setCountry(newValue.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), stateSelect, citySelect, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.toggleClose(),\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(AddLocationManual, \"QQTeqNie17fENgdJdzvquZU8Ftw=\", false, function () {\n  return [useGetCountriesQuery, useGetCitiesQuery];\n});\n_c = AddLocationManual;\nexport default AddLocationManual;\nvar _c;\n$RefreshReg$(_c, \"AddLocationManual\");","map":{"version":3,"names":["React","useState","Select","useGetCountriesQuery","useGetCitiesQuery","SelectState","AddLocationManual","props","country","setCountry","state","setState","city","setCity","data","isSuccess","countries","optionsCountries","forEach","item","push","value","label","dataCities","isSuccessCities","cities","optionsCities","handleStateChange","stateSelect","citySelect","newValue","console","log","toggleClose"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Modules/AddLocationOptions/AddLocationManual.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Select from 'react-select'\r\nimport { useGetCountriesQuery, useGetCitiesQuery } from '../../Features/locations/locationApiSlice'\r\nimport SelectState from '../../Atoms/SelectState'\r\n\r\n\r\nconst AddLocationManual = (props) => {\r\n\r\n    const [country, setCountry] = useState();\r\n    const [state, setState] = useState();\r\n    const [city, setCity] = useState();\r\n\r\n    const { data, isSuccess } = useGetCountriesQuery();\r\n    const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\r\n    const optionsCountries = [];\r\n    countries.forEach(item => {\r\n        optionsCountries.push({\r\n            value: item.country,\r\n            label: item.country\r\n        });\r\n    });\r\n\r\n\r\n\r\n    const { data: dataCities, isSuccess: isSuccessCities } = useGetCitiesQuery({ \"country\": country, \"state\": state });\r\n    const cities = isSuccessCities ? dataCities.data : [];\r\n    const optionsCities = [];\r\n    cities.forEach(item => {\r\n        optionsCities.push({\r\n            value: item.city,\r\n            label: item.city\r\n        });\r\n    });\r\n\r\n    const handleStateChange = (state) => {setState(state)}\r\n    const stateSelect = country ? <SelectState country={country} setState={handleStateChange} /> : <></>;\r\n\r\n    const citySelect = state ?\r\n        <div>\r\n            <span>City</span>\r\n            <br />\r\n            <Select\r\n                options={optionsCities}\r\n                onChange={(newValue) => setCity(newValue.value)}\r\n            />\r\n        </div> : <></>;\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => {\r\n                console.log(country);\r\n                console.log(state);\r\n                console.log(city);\r\n            }}>Check country var</button>\r\n\r\n            <br />\r\n            <span> Country </span>\r\n            <Select\r\n                options={optionsCountries}\r\n                onChange={((newValue) => { setCountry(newValue.value) })}\r\n            />\r\n            {stateSelect}\r\n            {citySelect}\r\n            <button onClick={() => props.toggleClose()}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLocationManual;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}