{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  const [finalTime, setFinalTime] = useState(0);\n  const [meridiem, setMeridiem] = useState('AM');\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\n    const militaryHour = parseInt(props.number.slice(0, 2));\n\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    const militaryHourWithMidnightConsistency = militaryHour === 24 ? 0 : militaryHour;\n    const afterOffsetHour = militaryHourWithMidnightConsistency + offset;\n    const militaryLocalTime = afterOffsetHour > 24 ? afterOffsetHour - 24 : afterOffsetHour < 0 ? afterOffsetHour + 24 : afterOffsetHour;\n    if (militaryLocalTime > 11) setMeridiem('PM');else setMeridiem('AM');\n    setFinalTime(12);\n    setMeridiem('AM');\n  }, []);\n  return finalTime + ' ' + meridiem;\n};\n_s(Time, \"SkNWobfZT1viphU+t7my1jlhJjc=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","finalTime","setFinalTime","meridiem","setMeridiem","militaryHour","parseInt","number","slice","offset","militaryHourWithMidnightConsistency","afterOffsetHour","militaryLocalTime"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n    const [finalTime, setFinalTime] = useState(0);\r\n    const [meridiem, setMeridiem] = useState('AM');\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n\r\n        const militaryHourWithMidnightConsistency = militaryHour === 24 ? 0 : militaryHour; \r\n\r\n        const afterOffsetHour = militaryHourWithMidnightConsistency + offset;\r\n\r\n        const militaryLocalTime = afterOffsetHour > 24 ?  afterOffsetHour - 24 : afterOffsetHour < 0 ? afterOffsetHour + 24 : afterOffsetHour;\r\n\r\n        if(militaryLocalTime > 11) setMeridiem('PM')\r\n        else setMeridiem('AM')\r\n\r\n\r\n\r\n\r\n        setFinalTime(12);\r\n        setMeridiem('AM');\r\n    }, [])\r\n\r\n\r\n    return finalTime + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAG9CC,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMO,YAAY,GAAGC,QAAQ,CAACN,KAAK,CAACO,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEvD;IACA,MAAMC,MAAM,GAAGT,KAAK,CAACS,MAAM;IAE3B,MAAMC,mCAAmC,GAAGL,YAAY,KAAK,EAAE,GAAG,CAAC,GAAGA,YAAY;IAElF,MAAMM,eAAe,GAAGD,mCAAmC,GAAGD,MAAM;IAEpE,MAAMG,iBAAiB,GAAGD,eAAe,GAAG,EAAE,GAAIA,eAAe,GAAG,EAAE,GAAGA,eAAe,GAAG,CAAC,GAAGA,eAAe,GAAG,EAAE,GAAGA,eAAe;IAErI,IAAGC,iBAAiB,GAAG,EAAE,EAAER,WAAW,CAAC,IAAI,CAAC,MACvCA,WAAW,CAAC,IAAI,CAAC;IAKtBF,YAAY,CAAC,EAAE,CAAC;IAChBE,WAAW,CAAC,IAAI,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAGN,OAAOH,SAAS,GAAG,GAAG,GAAGE,QAAQ;AACrC,CAAC;AAAA,GA/BKJ,IAAI;AAAA,KAAJA,IAAI;AAiCV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}