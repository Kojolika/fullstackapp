{"ast":null,"code":"import { apiSlice } from \"../../app/api/apiSlice\";\n\n//inject endpoint for the backend API to return user credentials\n//react hook useLoginMutation is automaticly generated from 'login' endpoint\n//https://redux-toolkit.js.org/rtk-query/usage/queries#frequently-used-query-hook-return-values for more info on the auto generated hook\n\nexport const authApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    login: builder.mutation({\n      query: credentials => ({\n        url: '/login',\n        method: 'POST',\n        body: {\n          ...credentials\n        } //credentials is a json object with fields: username, password\n        //to implement headers at each endpoint check https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery#text\n      })\n    }),\n\n    logout: builder.mutation({\n      query: token => ({\n        url: '/logout',\n        method: 'DELETE',\n        body: {\n          ...token\n        }\n      })\n    }),\n    register: builder.mutation({\n      query: credentials => ({\n        url: '/registration',\n        method: 'POST',\n        body: {\n          ...credentials\n        }\n      })\n    }),\n    refreshAccessToken: builder.query({\n      query: () => ({\n        url: '/login/refresh',\n        method: 'POST',\n        headers: {\n          'X-CSRF-REFRESH-TOKEN': getcsrfRefreshToken()\n        }\n      })\n    })\n  })\n});\nconst getcsrfRefreshToken = () => {\n  const cookies = document.cookie;\n  if (!cookies) return;\n  const seperatedCookies = cookies.split('; ');\n  const csrfRefreshTokenCookie = seperatedCookies.find(element => element.startsWith(\"csrf_refresh_token=\"));\n  const csrfRefreshToken = csrfRefreshTokenCookie.split('=')[1];\n  return csrfRefreshToken;\n};\nexport const {\n  useLoginMutation,\n  useLogoutMutation,\n  useRegisterMutation,\n  useRefreshAccessTokenQuery\n} = authApiSlice;","map":{"version":3,"names":["apiSlice","authApiSlice","injectEndpoints","endpoints","builder","login","mutation","query","credentials","url","method","body","logout","token","register","refreshAccessToken","headers","getcsrfRefreshToken","cookies","document","cookie","seperatedCookies","split","csrfRefreshTokenCookie","find","element","startsWith","csrfRefreshToken","useLoginMutation","useLogoutMutation","useRegisterMutation","useRefreshAccessTokenQuery"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Features/auth/authApiSlice.js"],"sourcesContent":["import { apiSlice } from \"../../app/api/apiSlice\";\r\n\r\n//inject endpoint for the backend API to return user credentials\r\n//react hook useLoginMutation is automaticly generated from 'login' endpoint\r\n//https://redux-toolkit.js.org/rtk-query/usage/queries#frequently-used-query-hook-return-values for more info on the auto generated hook\r\n\r\n\r\n\r\nexport const authApiSlice = apiSlice.injectEndpoints({\r\n    endpoints: builder => ({\r\n        login: builder.mutation({\r\n            query: credentials => ({\r\n                url: '/login',\r\n                method: 'POST',\r\n                body: { ...credentials } //credentials is a json object with fields: username, password\r\n                //to implement headers at each endpoint check https://redux-toolkit.js.org/rtk-query/api/fetchBaseQuery#text\r\n            }),\r\n        }),\r\n        logout: builder.mutation({\r\n            query: token => ({\r\n                url: '/logout',\r\n                method: 'DELETE',\r\n                body:{ ...token}\r\n            })\r\n        }),\r\n        register: builder.mutation({\r\n            query: credentials => ({\r\n                url: '/registration',\r\n                method: 'POST',\r\n                body: { ...credentials }\r\n            })\r\n        }),\r\n        refreshAccessToken: builder.query({\r\n            query: () => ({\r\n                url: '/login/refresh',\r\n                method: 'POST',\r\n                headers:{\r\n                    'X-CSRF-REFRESH-TOKEN': getcsrfRefreshToken()\r\n                }\r\n            })\r\n        })\r\n    })\r\n})\r\n\r\nconst getcsrfRefreshToken = () => {\r\n    const cookies = document.cookie;\r\n    if(!cookies) return;\r\n    const seperatedCookies = cookies.split('; ');\r\n    const csrfRefreshTokenCookie = seperatedCookies.find((element)=>element.startsWith(\"csrf_refresh_token=\"));\r\n    const csrfRefreshToken = csrfRefreshTokenCookie.split('=')[1];\r\n\r\n    return csrfRefreshToken;\r\n}\r\n\r\nexport const {\r\n    useLoginMutation,\r\n    useLogoutMutation,\r\n    useRegisterMutation,\r\n    useRefreshAccessTokenQuery\r\n} = authApiSlice;\r\n\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,wBAAwB;;AAEjD;AACA;AACA;;AAIA,OAAO,MAAMC,YAAY,GAAGD,QAAQ,CAACE,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACnBC,KAAK,EAAED,OAAO,CAACE,QAAQ,CAAC;MACpBC,KAAK,EAAEC,WAAW,KAAK;QACnBC,GAAG,EAAE,QAAQ;QACbC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAE,GAAGH;QAAY,CAAC,CAAC;QACzB;MACJ,CAAC;IACL,CAAC,CAAC;;IACFI,MAAM,EAAER,OAAO,CAACE,QAAQ,CAAC;MACrBC,KAAK,EAAEM,KAAK,KAAK;QACbJ,GAAG,EAAE,SAAS;QACdC,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAC;UAAE,GAAGE;QAAK;MACnB,CAAC;IACL,CAAC,CAAC;IACFC,QAAQ,EAAEV,OAAO,CAACE,QAAQ,CAAC;MACvBC,KAAK,EAAEC,WAAW,KAAK;QACnBC,GAAG,EAAE,eAAe;QACpBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAE;UAAE,GAAGH;QAAY;MAC3B,CAAC;IACL,CAAC,CAAC;IACFO,kBAAkB,EAAEX,OAAO,CAACG,KAAK,CAAC;MAC9BA,KAAK,EAAE,OAAO;QACVE,GAAG,EAAE,gBAAgB;QACrBC,MAAM,EAAE,MAAM;QACdM,OAAO,EAAC;UACJ,sBAAsB,EAAEC,mBAAmB;QAC/C;MACJ,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,MAAMA,mBAAmB,GAAG,MAAM;EAC9B,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM;EAC/B,IAAG,CAACF,OAAO,EAAE;EACb,MAAMG,gBAAgB,GAAGH,OAAO,CAACI,KAAK,CAAC,IAAI,CAAC;EAC5C,MAAMC,sBAAsB,GAAGF,gBAAgB,CAACG,IAAI,CAAEC,OAAO,IAAGA,OAAO,CAACC,UAAU,CAAC,qBAAqB,CAAC,CAAC;EAC1G,MAAMC,gBAAgB,GAAGJ,sBAAsB,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAE7D,OAAOK,gBAAgB;AAC3B,CAAC;AAED,OAAO,MAAM;EACTC,gBAAgB;EAChBC,iBAAiB;EACjBC,mBAAmB;EACnBC;AACJ,CAAC,GAAG9B,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}