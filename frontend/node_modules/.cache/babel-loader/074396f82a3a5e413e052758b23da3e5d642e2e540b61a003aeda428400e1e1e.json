{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SearchLocation.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport processed_locations from '../../data/processed_locations.json';\nimport '../../Styles/searchBar.css';\nimport { useDispatch } from \"react-redux\";\nimport { setLocation } from \"../../Features/locations/currentLocationSlice\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchLocation = () => {\n  _s();\n  const [isFocused, setIsFocused] = useState(false);\n  const [searchValue, setSearchValue] = useState(null);\n  const [previousQuery, setPreviousQuery] = useState(null);\n  const [queryResult, setQueryResult] = useState([]);\n  const [isClickingOnSearchBar, setIsClickingOnSearchBar] = useState(false);\n  const dispatch = useDispatch();\n  const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\n  const handleChange = newValue => {\n    setSearchValue(newValue);\n  };\n  const doWordArraysMatch = function (userQueryWordsArray, locationWordsArray) {\n    let startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let endIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : userQueryWordsArray.length;\n    for (let i = startIndex; i < endIndex; i++) {\n      //if not the final word in the query, assume the word is complete and do not match any words that extend past the query word\n      //if the word is the final word in the query, autocomplete is on (assume user didnt finish typing and thus match with words longer than the query word)\n      const regexExpr = i === endIndex - 1 ? '^' + userQueryWordsArray[i] : '^' + userQueryWordsArray[i] + '$';\n      const regexQuery = new RegExp(regexExpr);\n      if (!regexQuery.test(locationWordsArray[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const queryLocations = query => {\n    if (query === '' || query === null || query === undefined) return;\n    if (query.length < 3) {\n      setQueryResult([]);\n      return; //only query after atleast 3 letters, reduces lag\n    }\n\n    const queryWithoutPunc = query.replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\");\n    const queryLowercase = queryWithoutPunc.toLowerCase().trim();\n    const queryArray = queryLowercase.split(/\\s+/);\n\n    //cache previous search result\n    //Add a way to query from the previous result? \n    //(if the result is longer than the previous result)\n    //(not sure about shorter)\n    //Reduces time complexity\n    if (queryArray === previousQuery) return;else setPreviousQuery(queryResult);\n    const citiesQueryResults = [];\n    processed_locations.forEach(country => {\n      var _country$states;\n      (_country$states = country.states) === null || _country$states === void 0 ? void 0 : _country$states.forEach(state => {\n        var _state$cities;\n        (_state$cities = state.cities) === null || _state$cities === void 0 ? void 0 : _state$cities.forEach(city => {\n          const lowercaseCity = city.toLowerCase();\n          const cityArray = lowercaseCity.split(/\\s+/);\n          const numCityWords = cityArray.length;\n          const regexExpr = '^' + queryArray[0];\n          const regexQuery = new RegExp(regexExpr);\n\n          //this search assumes the user types in the city name first\n\n          //initial filter to lower matching results\n          if (regexQuery.test(lowercaseCity)) {\n            //2 cases if there is a match:\n            //user query has less words than city name\n            //or user query has more words than city name\n            //in either case check if it matches the city first\n            if (queryArray.length <= numCityWords) {\n              //check if each word in the city matches each word in the query\n              if (doWordArraysMatch(queryArray, cityArray)) {\n                citiesQueryResults.push({\n                  'location': {\n                    'city': city,\n                    'state': state.name,\n                    'country': country.name\n                  }\n                });\n              }\n            }\n\n            //need to add more logic for when the user attempts to type in the state and country after city\n            //...\n            //...\n          }\n        });\n      });\n    });\n\n    const topResults = [];\n    citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item));\n    setQueryResult(topResults);\n  };\n  useEffect(() => {\n    if (searchValue !== null) queryLocations(searchValue);\n  }, [searchValue]);\n  const handleDropDownSelect = (city, state, country) => {\n    console.log(\"test click\");\n    dispatch(setLocation({\n      \"city\": city,\n      \"province\": state,\n      \"country\": country\n    }));\n  };\n  const citiesQueryResultsElements = queryResult.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : queryResult.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"queryResult\",\n    onClick: () => handleDropDownSelect(item.location.city, item.location.state, item.location.country),\n    children: '' + item.location.city + ', ' + item.location.state + ', ' + item.location.country\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this));\n  const dropDown = isFocused ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdownBorder border\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"dropdownLabel\",\n      htmlFor: \"dropdownResults\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Choose a city:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 69\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dropdownResults \",\n      children: citiesQueryResultsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 34\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  useEffect(() => {\n    const handleUserClickOnPage = event => {\n      console.log('clicking on page');\n      if (isClickingOnSearchBar) {\n        setIsFocused(false);\n        setIsClickingOnSearchBar(false);\n      }\n      console.log('isClickingOnSearch value; ' + isClickingOnSearchBar);\n    };\n    document.addEventListener('click', handleUserClickOnPage);\n    return () => {\n      document.removeEventListener('click', handleUserClickOnPage);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"location-search-container\",\n    onClick: () => {\n      console.log('clicking on search');\n      setIsClickingOnSearchBar(true);\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"location-search\",\n      type: \"text\",\n      name: \"cities\",\n      placeholder: \"Search for a city...\",\n      onChange: e => handleChange(document.getElementById(\"location-search\").value),\n      onFocus: () => setIsFocused(true),\n      maxLength: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), dropDown]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchLocation, \"gomJ6t/VugtkyyHr5G5VDy0EYRE=\", false, function () {\n  return [useDispatch];\n});\n_c = SearchLocation;\nexport default SearchLocation;\nvar _c;\n$RefreshReg$(_c, \"SearchLocation\");","map":{"version":3,"names":["useState","useEffect","processed_locations","useDispatch","setLocation","SearchLocation","isFocused","setIsFocused","searchValue","setSearchValue","previousQuery","setPreviousQuery","queryResult","setQueryResult","isClickingOnSearchBar","setIsClickingOnSearchBar","dispatch","AMOUNT_OF_RESULTS_TO_DISPLAY","handleChange","newValue","doWordArraysMatch","userQueryWordsArray","locationWordsArray","startIndex","endIndex","length","i","regexExpr","regexQuery","RegExp","test","queryLocations","query","undefined","queryWithoutPunc","replace","queryLowercase","toLowerCase","trim","queryArray","split","citiesQueryResults","forEach","country","states","state","cities","city","lowercaseCity","cityArray","numCityWords","push","name","topResults","slice","map","item","handleDropDownSelect","console","log","citiesQueryResultsElements","index","location","dropDown","handleUserClickOnPage","event","document","addEventListener","removeEventListener","e","getElementById","value"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SearchLocation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport processed_locations from '../../data/processed_locations.json'\r\n\r\nimport '../../Styles/searchBar.css';\r\n\r\nimport { useDispatch, } from \"react-redux\";\r\nimport { setLocation } from \"../../Features/locations/currentLocationSlice\";\r\n\r\nconst SearchLocation = () => {\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [searchValue, setSearchValue] = useState(null);\r\n    const [previousQuery, setPreviousQuery] = useState(null);\r\n    const [queryResult, setQueryResult] = useState([]);\r\n    const [isClickingOnSearchBar, setIsClickingOnSearchBar] = useState(false);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\r\n\r\n    const handleChange = (newValue) => {\r\n        setSearchValue(newValue);\r\n    }\r\n\r\n\r\n\r\n    const doWordArraysMatch = (userQueryWordsArray, locationWordsArray, startIndex = 0, endIndex = userQueryWordsArray.length) => {\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            //if not the final word in the query, assume the word is complete and do not match any words that extend past the query word\r\n            //if the word is the final word in the query, autocomplete is on (assume user didnt finish typing and thus match with words longer than the query word)\r\n            const regexExpr = i === endIndex - 1 ? '^' + userQueryWordsArray[i] : '^' + userQueryWordsArray[i] + '$';\r\n            const regexQuery = new RegExp(regexExpr);\r\n\r\n            if (!regexQuery.test(locationWordsArray[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const queryLocations = (query) => {\r\n\r\n        if (query === '' || query === null || query === undefined) return;\r\n        if (query.length < 3) {\r\n            setQueryResult([]);\r\n            return; //only query after atleast 3 letters, reduces lag\r\n        }\r\n\r\n        const queryWithoutPunc = query.replace(/[.,/#!$%^&*;:{}=\\-_`~()]/g, \"\");\r\n        const queryLowercase = queryWithoutPunc.toLowerCase().trim();\r\n        const queryArray = queryLowercase.split(/\\s+/);\r\n\r\n        //cache previous search result\r\n        //Add a way to query from the previous result? \r\n        //(if the result is longer than the previous result)\r\n        //(not sure about shorter)\r\n        //Reduces time complexity\r\n        if (queryArray === previousQuery) return;\r\n        else setPreviousQuery(queryResult);\r\n\r\n        const citiesQueryResults = []\r\n        processed_locations.forEach(country => {\r\n            country.states?.forEach(state => {\r\n                state.cities?.forEach(city => {\r\n\r\n                    const lowercaseCity = city.toLowerCase();\r\n                    const cityArray = lowercaseCity.split(/\\s+/);\r\n                    const numCityWords = cityArray.length;\r\n\r\n                    const regexExpr = '^' + queryArray[0];\r\n                    const regexQuery = new RegExp(regexExpr);\r\n\r\n\r\n                    //this search assumes the user types in the city name first\r\n\r\n                    //initial filter to lower matching results\r\n                    if (regexQuery.test(lowercaseCity)) {\r\n\r\n                        //2 cases if there is a match:\r\n                        //user query has less words than city name\r\n                        //or user query has more words than city name\r\n                        //in either case check if it matches the city first\r\n                        if (queryArray.length <= numCityWords) {\r\n\r\n                            //check if each word in the city matches each word in the query\r\n                            if (doWordArraysMatch(queryArray, cityArray)) {\r\n                                citiesQueryResults.push({\r\n                                    'location': {\r\n                                        'city': city,\r\n                                        'state': state.name,\r\n                                        'country': country.name\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n\r\n                        //need to add more logic for when the user attempts to type in the state and country after city\r\n                        //...\r\n                        //...\r\n                    }\r\n                })\r\n            })\r\n\r\n        })\r\n        const topResults = [];\r\n        citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item))\r\n        setQueryResult(topResults);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (searchValue !== null) queryLocations(searchValue);\r\n    }, [searchValue])\r\n\r\n    const handleDropDownSelect = (city, state, country) => {\r\n        console.log(\"test click\");\r\n        dispatch(setLocation({\r\n            \"city\": city,\r\n            \"province\": state,\r\n            \"country\": country\r\n        }));\r\n    }\r\n\r\n    const citiesQueryResultsElements = queryResult.length === 0 ? <></> : queryResult.map((item, index) =>\r\n        <div\r\n            className=\"queryResult\"\r\n            key={index}\r\n            onClick={() => handleDropDownSelect(item.location.city, item.location.state, item.location.country)}>\r\n            {'' + item.location.city + ', ' + item.location.state + ', ' + item.location.country}\r\n        </div>\r\n    );\r\n\r\n    const dropDown = isFocused ? <div className=\"dropdownBorder border\">\r\n        <label className=\"dropdownLabel\" htmlFor=\"dropdownResults\" ><b>Choose a city:</b></label>\r\n\r\n        <div id=\"dropdownResults \">{citiesQueryResultsElements}</div>\r\n    </div> : <></>;\r\n\r\n\r\n    useEffect(() => {\r\n        const handleUserClickOnPage = (event) => {\r\n            console.log('clicking on page');\r\n            if (isClickingOnSearchBar) {\r\n                setIsFocused(false);\r\n                setIsClickingOnSearchBar(false);\r\n            }\r\n            console.log('isClickingOnSearch value; ' + isClickingOnSearchBar);\r\n        }\r\n\r\n        document.addEventListener('click', handleUserClickOnPage)\r\n\r\n        return () => {\r\n            document.removeEventListener('click', handleUserClickOnPage)\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div id=\"location-search-container\" onClick={() => {\r\n            console.log('clicking on search');\r\n            setIsClickingOnSearchBar(true);\r\n        }}>\r\n            <input id=\"location-search\"\r\n                type=\"text\"\r\n                name=\"cities\"\r\n                placeholder={\"Search for a city...\"}\r\n                onChange={(e) => handleChange(document.getElementById(\"location-search\").value)}\r\n                onFocus={() => setIsFocused(true)}\r\n                maxLength={100}\r\n            />\r\n            {dropDown}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchLocation"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}