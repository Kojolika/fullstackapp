{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials, logOut } from '../../Features/auth/authSlice';\nconst url = 'http://localhost:5000';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: url,\n  credentials: 'include',\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    headers.set('Access-Control-Allow-Origin', url);\n    headers.set('Access-Control-Allow-Credentials', 'true');\n    headers.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result, _result$error, _result2, _result2$error;\n  let result = await baseQuery(args, api, extraOptions);\n  console.log(result);\n  if (((_result = result) === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.originalStatus) === 401 && ((_result2 = result) === null || _result2 === void 0 ? void 0 : (_result2$error = _result2.error) === null || _result2$error === void 0 ? void 0 : _result2$error.msg) === 'Token has expired') {\n    console.log('sending refresh token');\n    //send refresh token to get new accessToken\n    const refreshResult = await baseQuery('/token/refresh', api, extraOptions);\n    console.log(refreshResult);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      const user = api.getState().auth.user;\n      //store the new token\n      api.dispatch(setCredentials({\n        ...refreshResult.data,\n        user\n      }));\n      //retry original query with new token\n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      api.dispatch(logOut());\n    }\n  }\n  return result;\n};\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","logOut","url","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","token","auth","set","baseQueryWithReauth","args","api","extraOptions","result","console","log","error","originalStatus","msg","refreshResult","data","user","dispatch","apiSlice","endpoints","builder"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/app/api/apiSlice.js"],"sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';\r\nimport { setCredentials, logOut } from '../../Features/auth/authSlice';\r\n\r\nconst url = 'http://localhost:5000';\r\n\r\nconst baseQuery = fetchBaseQuery({\r\n    baseUrl: url,\r\n    credentials: 'include',\r\n    prepareHeaders: (headers,{getState}) => {\r\n        const token = getState().auth.token;\r\n        if(token)\r\n        {\r\n            headers.set(\"authorization\", `Bearer ${token}`)\r\n        }\r\n        headers.set('Access-Control-Allow-Origin', url)\r\n        headers.set('Access-Control-Allow-Credentials', 'true')\r\n        headers.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS')\r\n        return headers;\r\n    }\r\n\r\n})\r\n\r\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\r\n    let result = await baseQuery(args, api ,extraOptions);\r\n    console.log(result);\r\n\r\n    if(result?.error?.originalStatus === 401 && result?.error?.msg === 'Token has expired') \r\n    {\r\n        console.log('sending refresh token');\r\n        //send refresh token to get new accessToken\r\n        const refreshResult = await baseQuery('/token/refresh', api, extraOptions);\r\n        console.log(refreshResult);\r\n        if(refreshResult?.data)\r\n        {\r\n            const user = api.getState().auth.user;\r\n            //store the new token\r\n            api.dispatch(setCredentials({...refreshResult.data, user}))\r\n            //retry original query with new token\r\n            result = await baseQuery(args, api, extraOptions);\r\n        }else\r\n        {\r\n          api.dispatch(logOut());  \r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const apiSlice = createApi({\r\n    baseQuery: baseQueryWithReauth,\r\n    endpoints: builder => ({})\r\n})"],"mappings":"AAAA,SAAQA,SAAS,EAAEC,cAAc,QAAO,8BAA8B;AACtE,SAASC,cAAc,EAAEC,MAAM,QAAQ,+BAA+B;AAEtE,MAAMC,GAAG,GAAG,uBAAuB;AAEnC,MAAMC,SAAS,GAAGJ,cAAc,CAAC;EAC7BK,OAAO,EAAEF,GAAG;EACZG,WAAW,EAAE,SAAS;EACtBC,cAAc,EAAE,CAACC,OAAO,WAAgB;IAAA,IAAf;MAACC;IAAQ,CAAC;IAC/B,MAAMC,KAAK,GAAGD,QAAQ,EAAE,CAACE,IAAI,CAACD,KAAK;IACnC,IAAGA,KAAK,EACR;MACIF,OAAO,CAACI,GAAG,CAAC,eAAe,EAAG,UAASF,KAAM,EAAC,CAAC;IACnD;IACAF,OAAO,CAACI,GAAG,CAAC,6BAA6B,EAAET,GAAG,CAAC;IAC/CK,OAAO,CAACI,GAAG,CAAC,kCAAkC,EAAE,MAAM,CAAC;IACvDJ,OAAO,CAACI,GAAG,CAAC,8BAA8B,EAAE,iCAAiC,CAAC;IAC9E,OAAOJ,OAAO;EAClB;AAEJ,CAAC,CAAC;AAEF,MAAMK,mBAAmB,GAAG,OAAOC,IAAI,EAAEC,GAAG,EAAEC,YAAY,KAAK;EAAA;EAC3D,IAAIC,MAAM,GAAG,MAAMb,SAAS,CAACU,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;EACrDE,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;EAEnB,IAAG,YAAAA,MAAM,6DAAN,QAAQG,KAAK,kDAAb,cAAeC,cAAc,MAAK,GAAG,IAAI,aAAAJ,MAAM,+DAAN,SAAQG,KAAK,mDAAb,eAAeE,GAAG,MAAK,mBAAmB,EACtF;IACIJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;IACA,MAAMI,aAAa,GAAG,MAAMnB,SAAS,CAAC,gBAAgB,EAAEW,GAAG,EAAEC,YAAY,CAAC;IAC1EE,OAAO,CAACC,GAAG,CAACI,aAAa,CAAC;IAC1B,IAAGA,aAAa,aAAbA,aAAa,eAAbA,aAAa,CAAEC,IAAI,EACtB;MACI,MAAMC,IAAI,GAAGV,GAAG,CAACN,QAAQ,EAAE,CAACE,IAAI,CAACc,IAAI;MACrC;MACAV,GAAG,CAACW,QAAQ,CAACzB,cAAc,CAAC;QAAC,GAAGsB,aAAa,CAACC,IAAI;QAAEC;MAAI,CAAC,CAAC,CAAC;MAC3D;MACAR,MAAM,GAAG,MAAMb,SAAS,CAACU,IAAI,EAAEC,GAAG,EAAEC,YAAY,CAAC;IACrD,CAAC,MACD;MACED,GAAG,CAACW,QAAQ,CAACxB,MAAM,EAAE,CAAC;IACxB;EACJ;EAEA,OAAOe,MAAM;AACjB,CAAC;AAED,OAAO,MAAMU,QAAQ,GAAG5B,SAAS,CAAC;EAC9BK,SAAS,EAAES,mBAAmB;EAC9Be,SAAS,EAAEC,OAAO,KAAK,CAAC,CAAC;AAC7B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}