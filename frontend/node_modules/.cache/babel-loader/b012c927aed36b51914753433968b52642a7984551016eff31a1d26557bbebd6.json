{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SelectCountry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCountry = props => {\n  _s();\n  const {\n    data: countriesList,\n    currentData: currentCountriesList,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? currentCountriesList ? currentCountriesList.data : countriesList.data : [];\n  useEffect(() => {\n    if (isError) setErrorMessage('No server response');else props.setErrorMessage('');\n  }, [isError]);\n  useEffect(() => {\n    const optionsCountries = [];\n    countries.forEach(item => {\n      optionsCountries.push({\n        value: item.country,\n        label: item.country\n      });\n    });\n  }, [countriesList, currentCountriesList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"country\",\n      children: \"Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"country\",\n      options: optionsCountries,\n      loadingMessage: () => loadingMessage,\n      isLoading: isLoading ? true : false,\n      autoFocus: true,\n      onChange: newValue => {\n        setCountry(newValue.value);\n        setState();\n        setCity();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectCountry, \"f1PeGhxQpyaDBPvPvWJMhOqviic=\", true);\n_c = SelectCountry;\nexport default SelectCountry;\nvar _c;\n$RefreshReg$(_c, \"SelectCountry\");","map":{"version":3,"names":["React","useEffect","SelectCountry","props","data","countriesList","currentData","currentCountriesList","isLoading","isSuccess","isError","error","useGetCountriesQuery","countries","setErrorMessage","optionsCountries","forEach","item","push","value","country","label","loadingMessage","newValue","setCountry","setState","setCity"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SelectCountry.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\n\r\nconst SelectCountry = (props) => {\r\n\r\n    const { data: countriesList, currentData: currentCountriesList, isLoading, isSuccess, isError, error } = useGetCountriesQuery();\r\n\r\n    const countries = isSuccess ? currentCountriesList ? currentCountriesList.data : countriesList.data : [];\r\n\r\n    useEffect(()=>{\r\n        if (isError) setErrorMessage('No server response');\r\n        else props.setErrorMessage('');\r\n    },[isError])\r\n\r\n    useEffect(()=>{\r\n        const optionsCountries = [];\r\n        countries.forEach(item => {\r\n            optionsCountries.push({\r\n                value: item.country,\r\n                label: item.country\r\n            });\r\n        });\r\n    \r\n    },[countriesList, currentCountriesList])\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor='country'>Country</label>\r\n            <Select\r\n                id=\"country\"\r\n                options={optionsCountries}\r\n                loadingMessage={() => loadingMessage}\r\n                isLoading={isLoading ? true : false}\r\n                autoFocus={true}\r\n                onChange={(newValue) => {\r\n                    setCountry(newValue.value);\r\n                    setState();\r\n                    setCity();\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCountry"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAA;AAExC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAE7B,MAAM;IAAEC,IAAI,EAAEC,aAAa;IAAEC,WAAW,EAAEC,oBAAoB;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGC,oBAAoB,EAAE;EAE/H,MAAMC,SAAS,GAAGJ,SAAS,GAAGF,oBAAoB,GAAGA,oBAAoB,CAACH,IAAI,GAAGC,aAAa,CAACD,IAAI,GAAG,EAAE;EAExGH,SAAS,CAAC,MAAI;IACV,IAAIS,OAAO,EAAEI,eAAe,CAAC,oBAAoB,CAAC,CAAC,KAC9CX,KAAK,CAACW,eAAe,CAAC,EAAE,CAAC;EAClC,CAAC,EAAC,CAACJ,OAAO,CAAC,CAAC;EAEZT,SAAS,CAAC,MAAI;IACV,MAAMc,gBAAgB,GAAG,EAAE;IAC3BF,SAAS,CAACG,OAAO,CAACC,IAAI,IAAI;MACtBF,gBAAgB,CAACG,IAAI,CAAC;QAClBC,KAAK,EAAEF,IAAI,CAACG,OAAO;QACnBC,KAAK,EAAEJ,IAAI,CAACG;MAChB,CAAC,CAAC;IACN,CAAC,CAAC;EAEN,CAAC,EAAC,CAACf,aAAa,EAAEE,oBAAoB,CAAC,CAAC;EAExC,oBACI;IAAA,wBACI;MAAO,OAAO,EAAC,SAAS;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAQ,eACxC,QAAC,MAAM;MACH,EAAE,EAAC,SAAS;MACZ,OAAO,EAAEQ,gBAAiB;MAC1B,cAAc,EAAE,MAAMO,cAAe;MACrC,SAAS,EAAEd,SAAS,GAAG,IAAI,GAAG,KAAM;MACpC,SAAS,EAAE,IAAK;MAChB,QAAQ,EAAGe,QAAQ,IAAK;QACpBC,UAAU,CAACD,QAAQ,CAACJ,KAAK,CAAC;QAC1BM,QAAQ,EAAE;QACVC,OAAO,EAAE;MACb;IAAE;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GAvCKxB,aAAa;AAAA,KAAbA,aAAa;AAyCnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}