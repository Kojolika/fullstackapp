{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Modules\\\\AddLocation.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { useGetCountriesQuery, useGetStatesQuery, useGetCitiesQuery } from '../Features/locations/locationApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddLocation = () => {\n  _s();\n  const {\n    data,\n    isLoading\n  } = useGetCountriesQuery();\n  const countries = isLoading ? [] : data.data; //data is the response from the backend, data.data is the list of countries\n  const optionsCountries = [];\n  countries.forEach(item => {\n    optionsCountries.push({\n      value: item.country,\n      label: item.country\n    });\n  });\n  const {\n    data: dataStates,\n    isLoading: isLoadingStates\n  } = useGetStatesQuery();\n  const states = isLoadingStates ? [] : dataStates.data;\n  const optionsStates = [];\n  countries.forEach(item => {\n    optionsStates.push({\n      value: item.state,\n      label: item.state\n    });\n  });\n  const [country, setCountry] = useState();\n  const [state, setState] = useState();\n  const [city, setCity] = useState();\n  const stateSelect = country ? /*#__PURE__*/_jsxDEV(Select, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 33\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const citySelect = state ? /*#__PURE__*/_jsxDEV(Select, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 30\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add my location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"- OR -\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Add a location manually\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Country \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCountries,\n      onChange: newValue => {\n        setCountry(newValue.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), stateSelect, citySelect]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(AddLocation, \"9sfFWFK8fyY/ZeXcDZkTsok+nuc=\", false, function () {\n  return [useGetCountriesQuery, useGetStatesQuery];\n});\n_c = AddLocation;\nexport default AddLocation;\nvar _c;\n$RefreshReg$(_c, \"AddLocation\");","map":{"version":3,"names":["React","useState","Select","useGetCountriesQuery","useGetStatesQuery","useGetCitiesQuery","AddLocation","data","isLoading","countries","optionsCountries","forEach","item","push","value","country","label","dataStates","isLoadingStates","states","optionsStates","state","setCountry","setState","city","setCity","stateSelect","citySelect","newValue"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Modules/AddLocation.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Select from 'react-select'\r\nimport { useGetCountriesQuery, useGetStatesQuery, useGetCitiesQuery } from '../Features/locations/locationApiSlice'\r\n\r\nconst AddLocation = () => {\r\n\r\n  const { data, isLoading } = useGetCountriesQuery()\r\n  const countries = isLoading ? [] : data.data; //data is the response from the backend, data.data is the list of countries\r\n  const optionsCountries = []\r\n  countries.forEach(item => {\r\n    optionsCountries.push({\r\n      value: item.country,\r\n      label: item.country\r\n    })\r\n  })\r\n\r\n  const {data: dataStates, isLoading: isLoadingStates} = useGetStatesQuery()\r\n  const states = isLoadingStates ? [] : dataStates.data;\r\n  const optionsStates = []\r\n  countries.forEach(item => {\r\n    optionsStates.push({\r\n      value: item.state,\r\n      label: item.state\r\n    })\r\n  })\r\n\r\n\r\n  const [country, setCountry] = useState();\r\n  const [state, setState] = useState();\r\n  const [city, setCity] = useState();\r\n\r\n  const stateSelect = country ? <Select /> : <></>;\r\n  const citySelect = state ? <Select /> : <></>;\r\n\r\n  return (\r\n    <div>\r\n      <button>Add my location</button>\r\n      <br />\r\n      <span>- OR -</span>\r\n      <br />\r\n      <span>Add a location manually</span>\r\n      <br />\r\n      <span> Country </span>\r\n      <Select \r\n      options={optionsCountries}\r\n      onChange= {((newValue) => {setCountry(newValue.value)})}\r\n      />\r\n      {stateSelect}\r\n      {citySelect}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddLocation"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,cAAc;AACjC,SAASC,oBAAoB,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAQ,wCAAwC;AAAA;AAAA;AAEnH,MAAMC,WAAW,GAAG,MAAM;EAAA;EAExB,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGL,oBAAoB,EAAE;EAClD,MAAMM,SAAS,GAAGD,SAAS,GAAG,EAAE,GAAGD,IAAI,CAACA,IAAI,CAAC,CAAC;EAC9C,MAAMG,gBAAgB,GAAG,EAAE;EAC3BD,SAAS,CAACE,OAAO,CAACC,IAAI,IAAI;IACxBF,gBAAgB,CAACG,IAAI,CAAC;MACpBC,KAAK,EAAEF,IAAI,CAACG,OAAO;MACnBC,KAAK,EAAEJ,IAAI,CAACG;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAM;IAACR,IAAI,EAAEU,UAAU;IAAET,SAAS,EAAEU;EAAe,CAAC,GAAGd,iBAAiB,EAAE;EAC1E,MAAMe,MAAM,GAAGD,eAAe,GAAG,EAAE,GAAGD,UAAU,CAACV,IAAI;EACrD,MAAMa,aAAa,GAAG,EAAE;EACxBX,SAAS,CAACE,OAAO,CAACC,IAAI,IAAI;IACxBQ,aAAa,CAACP,IAAI,CAAC;MACjBC,KAAK,EAAEF,IAAI,CAACS,KAAK;MACjBL,KAAK,EAAEJ,IAAI,CAACS;IACd,CAAC,CAAC;EACJ,CAAC,CAAC;EAGF,MAAM,CAACN,OAAO,EAAEO,UAAU,CAAC,GAAGrB,QAAQ,EAAE;EACxC,MAAM,CAACoB,KAAK,EAAEE,QAAQ,CAAC,GAAGtB,QAAQ,EAAE;EACpC,MAAM,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,EAAE;EAElC,MAAMyB,WAAW,GAAGX,OAAO,gBAAG,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG,gBAAG,qCAAK;EAChD,MAAMY,UAAU,GAAGN,KAAK,gBAAG,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAG,gBAAG,qCAAK;EAE7C,oBACE;IAAA,wBACE;MAAA,UAAQ;IAAe;MAAA;MAAA;MAAA;IAAA,QAAS,eAChC;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,UAAM;IAAM;MAAA;MAAA;MAAA;IAAA,QAAO,eACnB;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,UAAM;IAAuB;MAAA;MAAA;MAAA;IAAA,QAAO,eACpC;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,UAAM;IAAS;MAAA;MAAA;MAAA;IAAA,QAAO,eACtB,QAAC,MAAM;MACP,OAAO,EAAEX,gBAAiB;MAC1B,QAAQ,EAAKkB,QAAQ,IAAK;QAACN,UAAU,CAACM,QAAQ,CAACd,KAAK,CAAC;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACtD,EACDY,WAAW,EACXC,UAAU;EAAA;IAAA;IAAA;IAAA;EAAA,QAEP;AAEV,CAAC;AAAA,GAhDKrB,WAAW;EAAA,QAEaH,oBAAoB,EAUOC,iBAAiB;AAAA;AAAA,KAZpEE,WAAW;AAkDjB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}