{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SelectCountry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useGetCountriesQuery } from '../../Features/locations/locationApiSlice';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCountry = props => {\n  _s();\n  const {\n    data: countriesList,\n    currentData: currentCountriesList,\n    isLoading,\n    isSuccess,\n    isError\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? currentCountriesList ? currentCountriesList : countriesList : [];\n  const optionsCountries = [];\n  countries.forEach(item => {\n    optionsCountries.push({\n      value: item.country,\n      label: item.country\n    });\n  });\n  const placeholderMessage = 'Select a country';\n  const loadingMessage = 'Loading Countries...';\n  useEffect(() => {\n    if (isError) props.setErrorMessage('No server response');else props.setErrorMessage('');\n  }, [isError]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"country\",\n      children: \"Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"country\",\n      placeholder: placeholderMessage,\n      options: optionsCountries,\n      loadingMessage: () => loadingMessage,\n      isLoading: isLoading ? true : false,\n      autoFocus: true,\n      onChange: newValue => {\n        props.setCountry(newValue.value);\n      },\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectCountry, \"rhQ0ila/8QkyU0hY5nvkv4dQP54=\", false, function () {\n  return [useGetCountriesQuery];\n});\n_c = SelectCountry;\nexport default SelectCountry;\nvar _c;\n$RefreshReg$(_c, \"SelectCountry\");","map":{"version":3,"names":["React","useEffect","useGetCountriesQuery","Select","SelectCountry","props","data","countriesList","currentData","currentCountriesList","isLoading","isSuccess","isError","countries","optionsCountries","forEach","item","push","value","country","label","placeholderMessage","loadingMessage","setErrorMessage","newValue","setCountry"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SelectCountry.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useGetCountriesQuery } from '../../Features/locations/locationApiSlice';\r\nimport Select from 'react-select'\r\n\r\nconst SelectCountry = (props) => {\r\n\r\n    const { data: countriesList, currentData: currentCountriesList, isLoading, isSuccess, isError } = useGetCountriesQuery();\r\n    const countries = isSuccess ? currentCountriesList ? currentCountriesList : countriesList : [];\r\n    const optionsCountries = [];\r\n    countries.forEach(item => {\r\n        optionsCountries.push({\r\n            value: item.country,\r\n            label: item.country\r\n        });\r\n    });\r\n\r\n    const placeholderMessage = 'Select a country';\r\n    const loadingMessage = 'Loading Countries...';\r\n\r\n    useEffect(()=>{\r\n        if (isError) props.setErrorMessage('No server response');\r\n        else props.setErrorMessage('');\r\n    },[isError])\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor='country'>Country</label>\r\n            <Select\r\n                id=\"country\"\r\n                placeholder={placeholderMessage}\r\n                options={optionsCountries}\r\n                loadingMessage={() => loadingMessage}\r\n                isLoading={isLoading ? true : false}\r\n                autoFocus={true}\r\n                onChange={newValue => {props.setCountry(newValue.value);}}\r\n                required={true}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCountry"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,OAAOC,MAAM,MAAM,cAAc;AAAA;AAEjC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAE7B,MAAM;IAAEC,IAAI,EAAEC,aAAa;IAAEC,WAAW,EAAEC,oBAAoB;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGV,oBAAoB,EAAE;EACxH,MAAMW,SAAS,GAAGF,SAAS,GAAGF,oBAAoB,GAAGA,oBAAoB,GAAGF,aAAa,GAAG,EAAE;EAC9F,MAAMO,gBAAgB,GAAG,EAAE;EAC3BD,SAAS,CAACE,OAAO,CAACC,IAAI,IAAI;IACtBF,gBAAgB,CAACG,IAAI,CAAC;MAClBC,KAAK,EAAEF,IAAI,CAACG,OAAO;MACnBC,KAAK,EAAEJ,IAAI,CAACG;IAChB,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,MAAME,kBAAkB,GAAG,kBAAkB;EAC7C,MAAMC,cAAc,GAAG,sBAAsB;EAE7CrB,SAAS,CAAC,MAAI;IACV,IAAIW,OAAO,EAAEP,KAAK,CAACkB,eAAe,CAAC,oBAAoB,CAAC,CAAC,KACpDlB,KAAK,CAACkB,eAAe,CAAC,EAAE,CAAC;EAClC,CAAC,EAAC,CAACX,OAAO,CAAC,CAAC;EAEZ,oBACI;IAAA,wBACI;MAAO,OAAO,EAAC,SAAS;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAQ,eACxC,QAAC,MAAM;MACH,EAAE,EAAC,SAAS;MACZ,WAAW,EAAES,kBAAmB;MAChC,OAAO,EAAEP,gBAAiB;MAC1B,cAAc,EAAE,MAAMQ,cAAe;MACrC,SAAS,EAAEZ,SAAS,GAAG,IAAI,GAAG,KAAM;MACpC,SAAS,EAAE,IAAK;MAChB,QAAQ,EAAEc,QAAQ,IAAI;QAACnB,KAAK,CAACoB,UAAU,CAACD,QAAQ,CAACN,KAAK,CAAC;MAAC,CAAE;MAC1D,QAAQ,EAAE;IAAK;MAAA;MAAA;MAAA;IAAA,QACjB;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GAnCKd,aAAa;EAAA,QAEmFF,oBAAoB;AAAA;AAAA,KAFpHE,aAAa;AAqCnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}