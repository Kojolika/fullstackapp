{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SearchLocation.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport processed_locations from '../../data/processed_locations.json';\nimport '../../Styles/searchBar.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchLocation = () => {\n  _s();\n  const [isFocused, setIsFocused] = useState(false);\n  const [searchValue, setSearchValue] = useState(null);\n  const initialQuery = [];\n  const [queryResult, setQueryResult] = useState(initialQuery);\n  const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\n  const handleChange = newValue => {\n    setSearchValue(newValue);\n  };\n  useEffect(() => {\n    queryLocations(searchValue);\n  }, [searchValue]);\n  const queryLocations = query => {\n    if (query === '' || query === null || query === undefined) return;\n    const queryWithoutPunc = query.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\");\n    const queryLowercase = queryWithoutPunc.toLowerCase();\n    const queryArray = queryLowercase.split(/\\s+/);\n    const citiesQueryResults = [];\n    processed_locations.forEach(country => {\n      country.states.forEach(state => {\n        state.cities.forEach(city => {\n          const lowercaseCity = city.toLowerCase();\n          const cityArray = lowercaseCity.split(/\\s+/);\n          const numCityWords = cityArray.length;\n          const lowercaseState = state.name.toLowerCase();\n          const stateArray = lowercaseState.split(/\\s+/);\n          const numStateWords = stateArray.length;\n          const lowercaseCountry = country.name.toLowerCase();\n          const countryArray = lowercaseCountry.split(/\\s+/);\n          const numCountryWords = countryArray.length;\n          const regexExpr = '^' + queryArray[0];\n          const regexQuery = new RegExp(regexExpr);\n          let doesCityMatch = false;\n          if (regexQuery.test(lowercaseCity)) {\n            doesCityMatch = true;\n            if (queryArray.length <= numCityWords) {\n              for (let i = 0; i < queryArray.length; i++) {\n                const regexExpr = '^' + queryArray[i];\n                const regexQuery = new RegExp(regexExpr);\n                if (!regexQuery.test(cityArray[i])) {\n                  doesCityMatch = false;\n                  break;\n                }\n              }\n            } else {\n              const numQueryWordsMoreThanCityWords = queryArray.length - numCityWords;\n              for (let i = 1; i < queryArray.length; i++) {\n                const regexExpr = '^' + queryArray[i];\n                const regexQuery = new RegExp(regexExpr);\n                if (!regexQuery.test(lowercaseState) || !regexQuery.test(lowercaseCountry)) {\n                  doesCityMatch = false;\n                  break;\n                }\n              }\n            }\n          }\n          if (doesCityMatch) {\n            citiesQueryResults.push({\n              'location': {\n                'city': city,\n                'state': state.name,\n                'country': country.name\n              }\n            });\n          }\n        });\n      });\n    });\n    const topResults = [];\n    citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item));\n    setQueryResult(topResults);\n  };\n  const handleDropDownSelect = (city, state, country) => {};\n  const countriesQueryResultsElements = queryResult.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : queryResult.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"queryResult\",\n    onClick: () => handleDropDownSelect(item.location.city, item.location.state, item.location.country),\n    children: '' + item.location.city + ', ' + item.location.state + ', ' + item.location.country\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this));\n  const dropDown = isFocused ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdownBorder border\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"dropdownLabel\",\n      htmlFor: \"dropdownResultsCountry\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Choose a city:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 76\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdownResults \",\n      children: countriesQueryResultsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 34\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"location-search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"location-search\",\n      type: \"text\",\n      name: \"cities\",\n      placeholder: \"Search for a city...\",\n      onChange: e => handleChange(document.getElementById(\"location-search\").value),\n      onFocus: () => setIsFocused(true),\n      onBlur: () => setIsFocused(false),\n      maxLength: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), dropDown]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchLocation, \"jo8uuS/kwHMYaiGse5rzuHlSnAM=\");\n_c = SearchLocation;\nexport default SearchLocation;\nvar _c;\n$RefreshReg$(_c, \"SearchLocation\");","map":{"version":3,"names":["useState","useEffect","processed_locations","SearchLocation","isFocused","setIsFocused","searchValue","setSearchValue","initialQuery","queryResult","setQueryResult","AMOUNT_OF_RESULTS_TO_DISPLAY","handleChange","newValue","queryLocations","query","undefined","queryWithoutPunc","replace","queryLowercase","toLowerCase","queryArray","split","citiesQueryResults","forEach","country","states","state","cities","city","lowercaseCity","cityArray","numCityWords","length","lowercaseState","name","stateArray","numStateWords","lowercaseCountry","countryArray","numCountryWords","regexExpr","regexQuery","RegExp","doesCityMatch","test","i","numQueryWordsMoreThanCityWords","push","topResults","slice","map","item","handleDropDownSelect","countriesQueryResultsElements","index","location","dropDown","e","document","getElementById","value"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SearchLocation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport processed_locations from '../../data/processed_locations.json'\r\n\r\nimport '../../Styles/searchBar.css';\r\n\r\nconst SearchLocation = () => {\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [searchValue, setSearchValue] = useState(null);\r\n    const initialQuery = [];\r\n    const [queryResult, setQueryResult] = useState(initialQuery);\r\n\r\n    const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\r\n\r\n    const handleChange = (newValue) => {\r\n        setSearchValue(newValue);\r\n    }\r\n\r\n    useEffect(() => {\r\n        queryLocations(searchValue);\r\n\r\n    }, [searchValue])\r\n\r\n    const queryLocations = (query) => {\r\n\r\n        if (query === '' || query === null || query === undefined) return;\r\n\r\n        const queryWithoutPunc = query.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\");\r\n        const queryLowercase = queryWithoutPunc.toLowerCase();\r\n        const queryArray = queryLowercase.split(/\\s+/);\r\n\r\n\r\n        const citiesQueryResults = []\r\n        processed_locations.forEach(country => {\r\n            country.states.forEach(state => {\r\n                state.cities.forEach(city => {\r\n\r\n                    const lowercaseCity = city.toLowerCase();\r\n                    const cityArray = lowercaseCity.split(/\\s+/);\r\n                    const numCityWords = cityArray.length;\r\n\r\n                    const lowercaseState = state.name.toLowerCase();\r\n                    const stateArray = lowercaseState.split(/\\s+/);\r\n                    const numStateWords = stateArray.length;\r\n\r\n                    const lowercaseCountry = country.name.toLowerCase();\r\n                    const countryArray = lowercaseCountry.split(/\\s+/);\r\n                    const numCountryWords = countryArray.length;\r\n\r\n\r\n                    const regexExpr = '^' + queryArray[0];\r\n                    const regexQuery = new RegExp(regexExpr);\r\n                    let doesCityMatch = false;\r\n\r\n                    if (regexQuery.test(lowercaseCity)) {\r\n                        doesCityMatch = true;\r\n                        if(queryArray.length <= numCityWords){\r\n                            for(let i=0; i<queryArray.length; i++){\r\n                                const regexExpr = '^' + queryArray[i];\r\n                                const regexQuery = new RegExp(regexExpr);\r\n                                if(!regexQuery.test(cityArray[i])){\r\n                                    doesCityMatch = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            const numQueryWordsMoreThanCityWords = queryArray.length - numCityWords;\r\n\r\n                            for(let i=1;i<queryArray.length; i++){\r\n                                const regexExpr = '^' + queryArray[i];\r\n                                const regexQuery = new RegExp(regexExpr);\r\n                                if(!regexQuery.test(lowercaseState) || !regexQuery.test(lowercaseCountry)){\r\n                                    doesCityMatch = false;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if(doesCityMatch){\r\n                        citiesQueryResults.push({\r\n                            'location': {\r\n                                'city': city,\r\n                                'state': state.name,\r\n                                'country': country.name\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n            })\r\n\r\n        })\r\n        const topResults = [];\r\n        citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item))\r\n        setQueryResult(topResults);\r\n    }\r\n\r\n    const handleDropDownSelect = (city, state, country) => {\r\n\r\n    }\r\n\r\n    const countriesQueryResultsElements = queryResult.length === 0 ? <></> : queryResult.map((item, index) =>\r\n        <div\r\n            className=\"queryResult\"\r\n            key={index}\r\n            onClick={() => handleDropDownSelect(item.location.city, item.location.state, item.location.country)}\r\n        >\r\n            {'' + item.location.city + ', ' + item.location.state + ', ' + item.location.country}\r\n        </div>\r\n    );\r\n\r\n    const dropDown = isFocused ? <div className=\"dropdownBorder border\">\r\n        <label className=\"dropdownLabel\" htmlFor=\"dropdownResultsCountry\" ><b>Choose a city:</b></label>\r\n        <div className=\"dropdownResults \">{countriesQueryResultsElements}</div>\r\n    </div> : <></>;\r\n\r\n    return (\r\n        <div id=\"location-search-container\">\r\n            <input id=\"location-search\"\r\n                type=\"text\"\r\n                name=\"cities\"\r\n                placeholder={\"Search for a city...\"}\r\n                onChange={(e) => handleChange(document.getElementById(\"location-search\").value)}\r\n                onFocus={() => setIsFocused(true)}\r\n                onBlur={() => setIsFocused(false)}\r\n                maxLength={100}\r\n            />\r\n            {dropDown}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchLocation"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}