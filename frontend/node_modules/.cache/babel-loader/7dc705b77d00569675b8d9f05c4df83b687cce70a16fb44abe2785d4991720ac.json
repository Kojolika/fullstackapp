{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Modules\\\\AddLocationOptions\\\\AddLocationManual.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { useGetCountriesQuery, useGetStatesQuery, useGetCitiesQuery } from '../../Features/locations/locationApiSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddLocationManual = props => {\n  _s();\n  const [country, setCountry] = useState();\n  const [state, setState] = useState();\n  const [city, setCity] = useState();\n  const {\n    data,\n    isSuccess\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\n  const optionsCountries = [];\n  countries.forEach(item => {\n    optionsCountries.push({\n      value: item.country,\n      label: item.country\n    });\n  });\n  const {\n    data: dataStates,\n    isSuccess: isSuccessStates\n  } = useGetStatesQuery({\n    \"country\": country\n  });\n  const states = isSuccessStates ? dataStates.data : [];\n  const optionsStates = [];\n  states.forEach(item => {\n    optionsStates.push({\n      value: item.state,\n      label: item.state\n    });\n  });\n  const {\n    data: dataCities,\n    isSuccess: isSuccessCities\n  } = useGetCitiesQuery({\n    \"country\": country,\n    \"state\": state\n  });\n  const cities = isSuccessCities ? dataCities.data : [];\n  const optionsCities = [];\n  cities.forEach(item => {\n    optionsCities.push({\n      value: item.city,\n      label: item.city\n    });\n  });\n  const stateSelect = country ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"State/Province\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsStates,\n      onChange: newValue => setState(newValue.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const citySelect = state ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCities,\n      onChange: newValue => setCity(newValue.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(country);\n        console.log(state);\n        console.log(city);\n      },\n      children: \"Check country var\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Use my current location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"- OR -\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Add a location manually\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Country \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCountries,\n      onChange: newValue => {\n        setCountry(newValue.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), stateSelect, citySelect, /*#__PURE__*/_jsxDEV(\"button\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(AddLocationManual, \"u/LQZw0iseJkm3UH0FL/FhFBVLI=\", false, function () {\n  return [useGetCountriesQuery, useGetStatesQuery, useGetCitiesQuery];\n});\n_c = AddLocationManual;\nexport default AddLocationManual;\nvar _c;\n$RefreshReg$(_c, \"AddLocationManual\");","map":{"version":3,"names":["React","useState","Select","useGetCountriesQuery","useGetStatesQuery","useGetCitiesQuery","AddLocationManual","props","country","setCountry","state","setState","city","setCity","data","isSuccess","countries","optionsCountries","forEach","item","push","value","label","dataStates","isSuccessStates","states","optionsStates","dataCities","isSuccessCities","cities","optionsCities","stateSelect","newValue","citySelect","console","log"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Modules/AddLocationOptions/AddLocationManual.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport Select from 'react-select'\r\nimport { useGetCountriesQuery, useGetStatesQuery, useGetCitiesQuery } from '../../Features/locations/locationApiSlice'\r\n\r\n\r\nconst AddLocationManual = (props) => {\r\n\r\n    const [country, setCountry] = useState();\r\n    const [state, setState] = useState();\r\n    const [city, setCity] = useState();\r\n\r\n    const { data, isSuccess } = useGetCountriesQuery();\r\n    const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\r\n    const optionsCountries = [];\r\n    countries.forEach(item => {\r\n        optionsCountries.push({\r\n            value: item.country,\r\n            label: item.country\r\n        });\r\n    });\r\n\r\n    const { data: dataStates, isSuccess: isSuccessStates } = useGetStatesQuery({ \"country\": country });\r\n    const states = isSuccessStates ? dataStates.data : [];\r\n    const optionsStates = [];\r\n    states.forEach(item => {\r\n        optionsStates.push({\r\n            value: item.state,\r\n            label: item.state\r\n        });\r\n    });\r\n\r\n    const { data: dataCities, isSuccess: isSuccessCities } = useGetCitiesQuery({ \"country\": country, \"state\": state });\r\n    const cities = isSuccessCities ? dataCities.data : [];\r\n    const optionsCities = [];\r\n    cities.forEach(item => {\r\n        optionsCities.push({\r\n            value: item.city,\r\n            label: item.city\r\n        });\r\n    });\r\n\r\n    const stateSelect = country ?\r\n        <div>\r\n            <span>State/Province</span>\r\n            <br />\r\n            <Select\r\n                options={optionsStates}\r\n                onChange={((newValue) => setState(newValue.value))}\r\n            />\r\n        </div> : <></>;\r\n    const citySelect = state ?\r\n        <div>\r\n            <span>City</span>\r\n            <br />\r\n            <Select\r\n                options={optionsCities}\r\n                onChange={((newValue) => setCity(newValue.value))}\r\n            />\r\n        </div> : <></>;\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => {\r\n                console.log(country);\r\n                console.log(state);\r\n                console.log(city);\r\n            }}>Check country var</button>\r\n\r\n            <br />\r\n            <button>Use my current location</button>\r\n            <br />\r\n            <span>- OR -</span>\r\n            <br />\r\n            <span>Add a location manually</span>\r\n            <br />\r\n            <span> Country </span>\r\n            <Select\r\n                options={optionsCountries}\r\n                onChange={((newValue) => { setCountry(newValue.value) })}\r\n            />\r\n            {stateSelect}\r\n            {citySelect}\r\n            <button></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLocationManual;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}