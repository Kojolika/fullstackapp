{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  let meridiem = 'AM'; //AM or PM\n  let time = 1;\n  const [finalTime, setFinalTime] = useState(time);\n  const [finalMeridiem, setFinalMeridiem] = useState('AM');\n  const swapMeridiemValue = () => {\n    if (meridiem === 'AM') {\n      meridiem = 'PM';\n    } else {\n      meridiem = 'AM';\n    }\n  };\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\n    const militaryHour = parseInt(props.number.slice(0, 2));\n    const afterOffsetHour = militaryHour + offset;\n\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    if (offset === 12 || offset === -12) {\n      swapMeridiemValue();\n      time = regularHourUTC();\n    } else {\n      //offset < 12 || offset > -12\n\n      if (afterOffsetHour > 12) {\n        swapMeridiemValue();\n        time = afterOffsetHour - 12;\n      } else if (afterOffsetHour == 0) {\n        time = 12 + afterOffsetHour;\n      } else if (afterOffsetHour < 0) {\n        swapMeridiemValue();\n        time = 12 + afterOffsetHour;\n      } else {\n        time = afterOffsetHour;\n      }\n    }\n    setFinalTime(time);\n    setFinalMeridiem(meridiem);\n  }, []);\n  return finalTime + ' ' + finalMeridiem;\n};\n_s(Time, \"07BqU2yxoExYXdKch0lIcORzwzs=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","time","finalTime","setFinalTime","finalMeridiem","setFinalMeridiem","swapMeridiemValue","militaryHour","parseInt","number","slice","afterOffsetHour","offset","regularHourUTC"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    let meridiem = 'AM'; //AM or PM\r\n    let time = 1;\r\n\r\n    const [finalTime, setFinalTime] = useState(time);\r\n    const [finalMeridiem, setFinalMeridiem] = useState('AM');\r\n\r\n    const swapMeridiemValue = () => {\r\n        if (meridiem === 'AM'){\r\n            meridiem ='PM';\r\n        } \r\n        else {\r\n            meridiem ='AM';\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n        \r\n        const afterOffsetHour = militaryHour + offset;\r\n\r\n\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n        \r\n\r\n        if (offset === 12 || offset === -12) {\r\n            swapMeridiemValue()\r\n            time = regularHourUTC();\r\n\r\n        } else { //offset < 12 || offset > -12\r\n\r\n            if (afterOffsetHour > 12) {\r\n                swapMeridiemValue();\r\n                time = afterOffsetHour - 12;\r\n            }\r\n            else if(afterOffsetHour == 0){\r\n                time = 12 + afterOffsetHour;\r\n            }\r\n            else if (afterOffsetHour < 0) {\r\n                swapMeridiemValue();\r\n                time = 12 + afterOffsetHour;\r\n            }\r\n            else {\r\n                time = afterOffsetHour;\r\n            }\r\n        }\r\n        setFinalTime(time);\r\n        setFinalMeridiem(meridiem);\r\n    }, [])\r\n\r\n    \r\n    return finalTime + ' ' + finalMeridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,IAAIC,QAAQ,GAAG,IAAI,CAAC,CAAC;EACrB,IAAIC,IAAI,GAAG,CAAC;EAEZ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACK,IAAI,CAAC;EAChD,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMU,iBAAiB,GAAG,MAAM;IAC5B,IAAIN,QAAQ,KAAK,IAAI,EAAC;MAClBA,QAAQ,GAAE,IAAI;IAClB,CAAC,MACI;MACDA,QAAQ,GAAE,IAAI;IAClB;EACJ,CAAC;EAGDH,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMU,YAAY,GAAGC,QAAQ,CAACT,KAAK,CAACU,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEvD,MAAMC,eAAe,GAAGJ,YAAY,GAAGK,MAAM;;IAG7C;IACA,MAAMA,MAAM,GAAGb,KAAK,CAACa,MAAM;IAG3B,IAAIA,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,CAAC,EAAE,EAAE;MACjCN,iBAAiB,EAAE;MACnBL,IAAI,GAAGY,cAAc,EAAE;IAE3B,CAAC,MAAM;MAAE;;MAEL,IAAIF,eAAe,GAAG,EAAE,EAAE;QACtBL,iBAAiB,EAAE;QACnBL,IAAI,GAAGU,eAAe,GAAG,EAAE;MAC/B,CAAC,MACI,IAAGA,eAAe,IAAI,CAAC,EAAC;QACzBV,IAAI,GAAG,EAAE,GAAGU,eAAe;MAC/B,CAAC,MACI,IAAIA,eAAe,GAAG,CAAC,EAAE;QAC1BL,iBAAiB,EAAE;QACnBL,IAAI,GAAG,EAAE,GAAGU,eAAe;MAC/B,CAAC,MACI;QACDV,IAAI,GAAGU,eAAe;MAC1B;IACJ;IACAR,YAAY,CAACF,IAAI,CAAC;IAClBI,gBAAgB,CAACL,QAAQ,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAGN,OAAOE,SAAS,GAAG,GAAG,GAAGE,aAAa;AAC1C,CAAC;AAAA,GAzDKN,IAAI;AAAA,KAAJA,IAAI;AA2DV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}