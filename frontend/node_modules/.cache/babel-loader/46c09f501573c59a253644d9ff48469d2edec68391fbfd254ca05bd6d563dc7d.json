{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { setCredentials, logOut } from '../../Features/auth/authSlice';\nconst url = 'http://localhost:5000';\nconst baseQuery = fetchBaseQuery({\n  baseUrl: url,\n  credentials: 'include',\n  prepareHeaders: (headers, _ref) => {\n    let {\n      getState\n    } = _ref;\n    const token = getState().auth.token;\n    if (token) {\n      headers.set(\"authorization\", `Bearer ${token}`);\n    }\n    const csrfAccessToken = getState().auth.csrfAccessToken;\n    if (csrfAccessToken) {\n      headers.set('X-CSRF-TOKEN', csrfAccessToken);\n    }\n    const crsfRefreshToken = getState().auth.crsfRefreshToken;\n    headers.set('Access-Control-Allow-Origin', url);\n    headers.set('Access-Control-Allow-Credentials', 'true');\n    headers.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\n    return headers;\n  }\n});\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\n  var _result, _result$error;\n  console.log('args, api, and extraOptions:');\n  console.log(args);\n  console.log(api);\n  console.log(extraOptions);\n  let result = await baseQuery(args, api, extraOptions);\n  console.log('responst from query');\n  console.log(result);\n  if (((_result = result) === null || _result === void 0 ? void 0 : (_result$error = _result.error) === null || _result$error === void 0 ? void 0 : _result$error.status) === 403) {\n    console.log('sending refresh token');\n    //send refresh token to get new accessToken\n    const refreshResult = await baseQuery({\n      method: 'POST',\n      url: '/token/refresh'\n    }, api, extraOptions);\n    console.log(refreshResult);\n    if (refreshResult !== null && refreshResult !== void 0 && refreshResult.data) {\n      const user = api.getState().auth.user;\n      console.log('user: ' + user);\n      //store the new token\n      api.dispatch(setCredentials({\n        ...refreshResult.data,\n        user\n      }));\n      //retry original query with new token\n      result = await baseQuery(args, api, extraOptions);\n    } else {\n      api.dispatch(logOut());\n      console.log('logging out..');\n    }\n  }\n  return result;\n};\nexport const apiSlice = createApi({\n  baseQuery: baseQueryWithReauth,\n  endpoints: builder => ({})\n});","map":{"version":3,"names":["createApi","fetchBaseQuery","setCredentials","logOut","url","baseQuery","baseUrl","credentials","prepareHeaders","headers","getState","token","auth","set","csrfAccessToken","crsfRefreshToken","baseQueryWithReauth","args","api","extraOptions","console","log","result","error","status","refreshResult","method","data","user","dispatch","apiSlice","endpoints","builder"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/app/api/apiSlice.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\nimport { setCredentials, logOut } from '../../Features/auth/authSlice';\r\n\r\nconst url = 'http://localhost:5000';\r\n\r\nconst baseQuery = fetchBaseQuery({\r\n    baseUrl: url,\r\n    credentials: 'include',\r\n    prepareHeaders: (headers, { getState }) => {\r\n        const token = getState().auth.token;\r\n        if (token) {\r\n            headers.set(\"authorization\", `Bearer ${token}`);\r\n        }\r\n        const csrfAccessToken = getState().auth.csrfAccessToken;\r\n        if(csrfAccessToken){\r\n            headers.set('X-CSRF-TOKEN', csrfAccessToken);\r\n        }\r\n        const crsfRefreshToken = getState().auth.crsfRefreshToken;\r\n        headers.set('Access-Control-Allow-Origin', url);\r\n        headers.set('Access-Control-Allow-Credentials', 'true');\r\n        headers.set('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');\r\n        return headers;\r\n    }\r\n\r\n})\r\n\r\nconst baseQueryWithReauth = async (args, api, extraOptions) => {\r\n    console.log('args, api, and extraOptions:')\r\n    console.log(args);\r\n    console.log(api);\r\n    console.log(extraOptions);\r\n    let result = await baseQuery(args, api, extraOptions);\r\n\r\n    console.log('responst from query');\r\n    console.log(result);\r\n\r\n    if (result?.error?.status === 403) {\r\n        console.log('sending refresh token');\r\n        //send refresh token to get new accessToken\r\n        const refreshResult = await baseQuery({ method: 'POST', url: '/token/refresh' }, api, extraOptions);\r\n        console.log(refreshResult);\r\n        if (refreshResult?.data) {\r\n            const user = api.getState().auth.user;\r\n            console.log('user: ' + user);\r\n            //store the new token\r\n            api.dispatch(setCredentials({ ...refreshResult.data, user }))\r\n            //retry original query with new token\r\n            result = await baseQuery(args, api, extraOptions);\r\n        } else {\r\n            api.dispatch(logOut());\r\n            console.log('logging out..');\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport const apiSlice = createApi({\r\n    baseQuery: baseQueryWithReauth,\r\n    endpoints: builder => ({})\r\n})"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}