{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  let meridiem = 'AM'; //AM or PM\n  let time = 1;\n  const [finalTime, setFinalTime] = useState(time);\n  const swapMeridiemValue = () => {\n    if (meridiem === 'AM') {\n      meridiem = 'PM';\n    } else {\n      meridiem = 'AM';\n    }\n  };\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\n    const militaryHour = parseInt(props.number.slice(0, 2));\n    console.log('Mil hour: ' + militaryHour);\n    const regularHour = () => {\n      if (militaryHour > 12) {\n        meridiem = 'PM';\n        return militaryHour - 12;\n      } else {\n        if (militaryHour === 12) {\n          meridiem = 'PM';\n          return militaryHour;\n        } else if (militaryHour === 0) {\n          meridiem = 'AM';\n          return 12;\n        } else {\n          meridiem = 'AM';\n          return militaryHour;\n        }\n      }\n    };\n    const regularHourUTC = regularHour();\n    console.log('regular UTC hour: ' + regularHourUTC);\n\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    const afterOffsetHour = regularHourUTC + offset;\n    console.log('after offset hour: ' + afterOffsetHour);\n    if (offset > 12 || offset < -12) {} else if (offset === 12 || offset === -12) {\n      swapMeridiemValue();\n      time = regularHourUTC();\n    } else {\n      //offset < 12 || offset > -12\n\n      if (afterOffsetHour > 12) {\n        swapMeridiemValue();\n        time = afterOffsetHour - 12;\n      } else if (afterOffsetHour < 1) {\n        console.log(meridiem);\n        console.log('swapping value, offset less than 1');\n        swapMeridiemValue();\n        console.log(meridiem);\n        time = 12 + afterOffsetHour;\n      } else {\n        time = afterOffsetHour;\n      }\n    }\n    console.log('final time : ' + time + ' ' + meridiem);\n  }, []);\n  return time + ' ' + meridiem;\n};\n_s(Time, \"vE1RypmUi2/Joo12GB2mtMFsm3o=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","time","finalTime","setFinalTime","swapMeridiemValue","militaryHour","parseInt","number","slice","console","log","regularHour","regularHourUTC","offset","afterOffsetHour"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    let meridiem = 'AM'; //AM or PM\r\n    let time = 1;\r\n\r\n    const [finalTime, setFinalTime] = useState(time);\r\n\r\n    const swapMeridiemValue = () => {\r\n        if (meridiem === 'AM'){\r\n            meridiem ='PM';\r\n        } \r\n        else {\r\n            meridiem ='AM';\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n        console.log('Mil hour: '+ militaryHour);\r\n        const regularHour = () => {\r\n            if (militaryHour > 12) {\r\n                meridiem ='PM';\r\n                return militaryHour - 12;\r\n            } else {\r\n                if (militaryHour === 12) {\r\n                    meridiem ='PM';\r\n                    return militaryHour;\r\n                }\r\n                else if (militaryHour === 0) {\r\n                    meridiem ='AM';\r\n                    return 12;\r\n                }\r\n                else {\r\n                    meridiem ='AM';\r\n                    return militaryHour;\r\n                }\r\n            }\r\n        }\r\n\r\n        const regularHourUTC = regularHour();\r\n        console.log('regular UTC hour: ' + regularHourUTC);\r\n\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n        const afterOffsetHour = regularHourUTC + offset;\r\n        console.log('after offset hour: ' + afterOffsetHour);\r\n\r\n        if (offset > 12 || offset < -12) {\r\n\r\n        } else if (offset === 12 || offset === -12) {\r\n            swapMeridiemValue()\r\n            time = regularHourUTC();\r\n\r\n        } else { //offset < 12 || offset > -12\r\n\r\n            if (afterOffsetHour > 12) {\r\n                swapMeridiemValue();\r\n                time = afterOffsetHour - 12;\r\n            }\r\n            else if (afterOffsetHour < 1) {\r\n                console.log(meridiem);\r\n                console.log('swapping value, offset less than 1')\r\n                swapMeridiemValue();\r\n                console.log(meridiem);\r\n                time = 12 + afterOffsetHour;\r\n            }\r\n            else {\r\n                time = afterOffsetHour;\r\n            }\r\n        }\r\n\r\n        console.log('final time : ' + time + ' ' + meridiem);\r\n    }, [])\r\n\r\n    \r\n    return time + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,IAAIC,QAAQ,GAAG,IAAI,CAAC,CAAC;EACrB,IAAIC,IAAI,GAAG,CAAC;EAEZ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACK,IAAI,CAAC;EAEhD,MAAMG,iBAAiB,GAAG,MAAM;IAC5B,IAAIJ,QAAQ,KAAK,IAAI,EAAC;MAClBA,QAAQ,GAAE,IAAI;IAClB,CAAC,MACI;MACDA,QAAQ,GAAE,IAAI;IAClB;EACJ,CAAC;EAGDH,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMQ,YAAY,GAAGC,QAAQ,CAACP,KAAK,CAACQ,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACvDC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAEL,YAAY,CAAC;IACvC,MAAMM,WAAW,GAAG,MAAM;MACtB,IAAIN,YAAY,GAAG,EAAE,EAAE;QACnBL,QAAQ,GAAE,IAAI;QACd,OAAOK,YAAY,GAAG,EAAE;MAC5B,CAAC,MAAM;QACH,IAAIA,YAAY,KAAK,EAAE,EAAE;UACrBL,QAAQ,GAAE,IAAI;UACd,OAAOK,YAAY;QACvB,CAAC,MACI,IAAIA,YAAY,KAAK,CAAC,EAAE;UACzBL,QAAQ,GAAE,IAAI;UACd,OAAO,EAAE;QACb,CAAC,MACI;UACDA,QAAQ,GAAE,IAAI;UACd,OAAOK,YAAY;QACvB;MACJ;IACJ,CAAC;IAED,MAAMO,cAAc,GAAGD,WAAW,EAAE;IACpCF,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGE,cAAc,CAAC;;IAElD;IACA,MAAMC,MAAM,GAAGd,KAAK,CAACc,MAAM;IAC3B,MAAMC,eAAe,GAAGF,cAAc,GAAGC,MAAM;IAC/CJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAGI,eAAe,CAAC;IAEpD,IAAID,MAAM,GAAG,EAAE,IAAIA,MAAM,GAAG,CAAC,EAAE,EAAE,CAEjC,CAAC,MAAM,IAAIA,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,CAAC,EAAE,EAAE;MACxCT,iBAAiB,EAAE;MACnBH,IAAI,GAAGW,cAAc,EAAE;IAE3B,CAAC,MAAM;MAAE;;MAEL,IAAIE,eAAe,GAAG,EAAE,EAAE;QACtBV,iBAAiB,EAAE;QACnBH,IAAI,GAAGa,eAAe,GAAG,EAAE;MAC/B,CAAC,MACI,IAAIA,eAAe,GAAG,CAAC,EAAE;QAC1BL,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;QACrBS,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjDN,iBAAiB,EAAE;QACnBK,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;QACrBC,IAAI,GAAG,EAAE,GAAGa,eAAe;MAC/B,CAAC,MACI;QACDb,IAAI,GAAGa,eAAe;MAC1B;IACJ;IAEAL,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGT,IAAI,GAAG,GAAG,GAAGD,QAAQ,CAAC;EACxD,CAAC,EAAE,EAAE,CAAC;EAGN,OAAOC,IAAI,GAAG,GAAG,GAAGD,QAAQ;AAChC,CAAC;AAAA,GA/EKF,IAAI;AAAA,KAAJA,IAAI;AAiFV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}