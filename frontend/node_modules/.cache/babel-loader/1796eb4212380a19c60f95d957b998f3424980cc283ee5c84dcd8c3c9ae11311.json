{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Modules\\\\AddLocationOptions\\\\AddLocationManual.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Select from 'react-select';\nimport { useGetCountriesQuery } from '../../Features/locations/locationApiSlice';\nimport SelectState from '../../Atoms/SelectState';\nimport SelectCity from '../../Atoms/SelectCity';\nimport './../../Styles/addLocation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AddLocationManual = props => {\n  _s();\n  const [country, setCountry] = useState();\n  const [state, setState] = useState();\n  const [city, setCity] = useState();\n  const {\n    data,\n    isSuccess\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\n  const optionsCountries = [];\n  countries.forEach(item => {\n    optionsCountries.push({\n      value: item.country,\n      label: item.country\n    });\n  });\n  const handleStateChange = state => setState(state);\n  const stateSelect = country ? /*#__PURE__*/_jsxDEV(SelectState, {\n    country: country,\n    setState: handleStateChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 35\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  const handleCityChange = city => setCity(city);\n  const citySelect = state ? /*#__PURE__*/_jsxDEV(SelectCity, {\n    country: country,\n    state: state,\n    setCity: handleCityChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 32\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Country \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCountries,\n      onChange: newValue => {\n        setCountry(newValue.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), stateSelect, citySelect, /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"note\",\n      children: \"Note: If no options for cities, then there are no active stations reporting weather data in that state.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => props.toggleClose(),\n      children: \"Close\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(AddLocationManual, \"Fntt0SBbPiPOs4TgYCWRzo7w1Y0=\", false, function () {\n  return [useGetCountriesQuery];\n});\n_c = AddLocationManual;\nexport default AddLocationManual;\nvar _c;\n$RefreshReg$(_c, \"AddLocationManual\");","map":{"version":3,"names":["useState","Select","useGetCountriesQuery","SelectState","SelectCity","AddLocationManual","props","country","setCountry","state","setState","city","setCity","data","isSuccess","countries","optionsCountries","forEach","item","push","value","label","handleStateChange","stateSelect","handleCityChange","citySelect","newValue","toggleClose"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Modules/AddLocationOptions/AddLocationManual.js"],"sourcesContent":["import { useState } from 'react'\r\nimport Select from 'react-select'\r\n\r\nimport { useGetCountriesQuery} from '../../Features/locations/locationApiSlice'\r\n\r\nimport SelectState from '../../Atoms/SelectState'\r\nimport SelectCity from '../../Atoms/SelectCity'\r\n\r\nimport './../../Styles/addLocation.css'\r\n\r\nconst AddLocationManual = (props) => {\r\n\r\n    const [country, setCountry] = useState();\r\n    const [state, setState] = useState();\r\n    const [city, setCity] = useState();\r\n\r\n    const { data, isSuccess } = useGetCountriesQuery();\r\n    const countries = isSuccess ? data.data : []; //data is the response from the backend, data.data is the list of countries\r\n    const optionsCountries = [];\r\n    countries.forEach(item => {\r\n        optionsCountries.push({\r\n            value: item.country,\r\n            label: item.country\r\n        });\r\n    });\r\n\r\n    const handleStateChange = (state) => setState(state);\r\n    const stateSelect = country ? <SelectState country={country} setState={handleStateChange} /> : <></>;\r\n\r\n    const handleCityChange = (city) => setCity(city);\r\n    const citySelect = state ? <SelectCity country={country} state={state} setCity={handleCityChange}/> : <></>;\r\n\r\n    return (\r\n        <div>\r\n            \r\n            <br />\r\n            <span> Country </span>\r\n            <Select\r\n                options={optionsCountries}\r\n                onChange={((newValue) => { setCountry(newValue.value) })}\r\n            />\r\n            {stateSelect}\r\n            {citySelect}\r\n            <span className='note'>Note: If no options for cities, then there are no active stations reporting weather data in that state.</span>\r\n            <button onClick={() => props.toggleClose()}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddLocationManual;"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,cAAc;AAEjC,SAASC,oBAAoB,QAAO,2CAA2C;AAE/E,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,UAAU,MAAM,wBAAwB;AAE/C,OAAO,gCAAgC;AAAA;AAAA;AAEvC,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;EAAA;EAEjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,EAAE;EACxC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,EAAE;EACpC,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,EAAE;EAElC,MAAM;IAAEa,IAAI;IAAEC;EAAU,CAAC,GAAGZ,oBAAoB,EAAE;EAClD,MAAMa,SAAS,GAAGD,SAAS,GAAGD,IAAI,CAACA,IAAI,GAAG,EAAE,CAAC,CAAC;EAC9C,MAAMG,gBAAgB,GAAG,EAAE;EAC3BD,SAAS,CAACE,OAAO,CAACC,IAAI,IAAI;IACtBF,gBAAgB,CAACG,IAAI,CAAC;MAClBC,KAAK,EAAEF,IAAI,CAACX,OAAO;MACnBc,KAAK,EAAEH,IAAI,CAACX;IAChB,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,MAAMe,iBAAiB,GAAIb,KAAK,IAAKC,QAAQ,CAACD,KAAK,CAAC;EACpD,MAAMc,WAAW,GAAGhB,OAAO,gBAAG,QAAC,WAAW;IAAC,OAAO,EAAEA,OAAQ;IAAC,QAAQ,EAAEe;EAAkB;IAAA;IAAA;IAAA;EAAA,QAAG,gBAAG,qCAAK;EAEpG,MAAME,gBAAgB,GAAIb,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC;EAChD,MAAMc,UAAU,GAAGhB,KAAK,gBAAG,QAAC,UAAU;IAAC,OAAO,EAAEF,OAAQ;IAAC,KAAK,EAAEE,KAAM;IAAC,OAAO,EAAEe;EAAiB;IAAA;IAAA;IAAA;EAAA,QAAE,gBAAG,qCAAK;EAE3G,oBACI;IAAA,wBAEI;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,UAAM;IAAS;MAAA;MAAA;MAAA;IAAA,QAAO,eACtB,QAAC,MAAM;MACH,OAAO,EAAER,gBAAiB;MAC1B,QAAQ,EAAIU,QAAQ,IAAK;QAAElB,UAAU,CAACkB,QAAQ,CAACN,KAAK,CAAC;MAAC;IAAG;MAAA;MAAA;MAAA;IAAA,QAC3D,EACDG,WAAW,EACXE,UAAU,eACX;MAAM,SAAS,EAAC,MAAM;MAAA,UAAC;IAAuG;MAAA;MAAA;MAAA;IAAA,QAAO,eACrI;MAAQ,OAAO,EAAE,MAAMnB,KAAK,CAACqB,WAAW,EAAG;MAAA,UAAC;IAAK;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACxD;AAEd,CAAC;AAAA,GArCKtB,iBAAiB;EAAA,QAMSH,oBAAoB;AAAA;AAAA,KAN9CG,iBAAiB;AAuCvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}