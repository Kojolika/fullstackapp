{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  const [meridiem, setMeridiem] = useState('AM'); //AM or PM\n  const [time, setTime] = useState(\"1\"); //time to be displayed\n\n  const swapMeridiemValue = () => {\n    if (meridiem === 'AM') {\n      setMeridiem('PM');\n    } else {\n      setMeridiem('AM');\n    }\n  };\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\n    const militaryHour = parseInt(props.number.slice(0, 2));\n    const regularHour = () => {\n      if (militaryHour > 12) {\n        setMeridiem('PM');\n        return militaryHour - 12;\n      } else {\n        if (militaryHour === 12) {\n          setMeridiem('PM');\n          return militaryHour;\n        } else if (militaryHour === 0) {\n          setMeridiem('AM');\n          return 12;\n        } else {\n          setMeridiem('AM');\n          return militaryHour;\n        }\n      }\n    };\n    const regularHourUTC = regularHour();\n\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    const afterOffsetHour = regularHourUTC + offset;\n    if (offset > 12 || offset < -12) {} else if (offset === 12 || offset === -12) {\n      swapMeridiemValue();\n      setTime(regularHourUTC);\n    } else {\n      //offset < 12 || offset > -12\n\n      if (afterOffsetHour > 12) {\n        swapMeridiemValue();\n        setTime(afterOffsetHour - 12);\n      } else if (afterOffsetHour < 1) {\n        console(meridiem);\n        console.log('swapping value, offset less than 1');\n        swapMeridiemValue();\n        console(meridiem);\n        setTime(12 + afterOffsetHour);\n      } else {\n        setTime(afterOffsetHour);\n      }\n    }\n  }, []);\n  return time + ' ' + meridiem;\n};\n_s(Time, \"nWPZ/s183JkcsQnperLnWlrfpIE=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","setMeridiem","time","setTime","swapMeridiemValue","militaryHour","parseInt","number","slice","regularHour","regularHourUTC","offset","afterOffsetHour","console","log"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    const [meridiem, setMeridiem] = useState('AM'); //AM or PM\r\n    const [time, setTime] = useState(\"1\"); //time to be displayed\r\n\r\n    const swapMeridiemValue = () => {\r\n        if (meridiem === 'AM'){\r\n            setMeridiem('PM');\r\n        } \r\n        else {\r\n            setMeridiem('AM');\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute and is in the UTC timezone\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n\r\n        const regularHour = () => {\r\n            if (militaryHour > 12) {\r\n                setMeridiem('PM');\r\n                return militaryHour - 12;\r\n            } else {\r\n                if (militaryHour === 12) {\r\n                    setMeridiem('PM');\r\n                    return militaryHour;\r\n                }\r\n                else if (militaryHour === 0) {\r\n                    setMeridiem('AM');\r\n                    return 12;\r\n                }\r\n                else {\r\n                    setMeridiem('AM');\r\n                    return militaryHour;\r\n                }\r\n            }\r\n        }\r\n\r\n        const regularHourUTC = regularHour();\r\n\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n        const afterOffsetHour = regularHourUTC + offset;\r\n\r\n        if (offset > 12 || offset < -12) {\r\n\r\n        } else if (offset === 12 || offset === -12) {\r\n            swapMeridiemValue()\r\n            setTime(regularHourUTC);\r\n\r\n        } else { //offset < 12 || offset > -12\r\n\r\n            if (afterOffsetHour > 12) {\r\n                swapMeridiemValue();\r\n                setTime(afterOffsetHour - 12);\r\n            }\r\n            else if (afterOffsetHour < 1) {\r\n                console(meridiem);\r\n                console.log('swapping value, offset less than 1')\r\n                swapMeridiemValue();\r\n                console(meridiem);\r\n                setTime(12 + afterOffsetHour);\r\n            }\r\n            else {\r\n                setTime(afterOffsetHour);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    return time + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEvC,MAAMQ,iBAAiB,GAAG,MAAM;IAC5B,IAAIJ,QAAQ,KAAK,IAAI,EAAC;MAClBC,WAAW,CAAC,IAAI,CAAC;IACrB,CAAC,MACI;MACDA,WAAW,CAAC,IAAI,CAAC;IACrB;EACJ,CAAC;EAGDJ,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMQ,YAAY,GAAGC,QAAQ,CAACP,KAAK,CAACQ,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEvD,MAAMC,WAAW,GAAG,MAAM;MACtB,IAAIJ,YAAY,GAAG,EAAE,EAAE;QACnBJ,WAAW,CAAC,IAAI,CAAC;QACjB,OAAOI,YAAY,GAAG,EAAE;MAC5B,CAAC,MAAM;QACH,IAAIA,YAAY,KAAK,EAAE,EAAE;UACrBJ,WAAW,CAAC,IAAI,CAAC;UACjB,OAAOI,YAAY;QACvB,CAAC,MACI,IAAIA,YAAY,KAAK,CAAC,EAAE;UACzBJ,WAAW,CAAC,IAAI,CAAC;UACjB,OAAO,EAAE;QACb,CAAC,MACI;UACDA,WAAW,CAAC,IAAI,CAAC;UACjB,OAAOI,YAAY;QACvB;MACJ;IACJ,CAAC;IAED,MAAMK,cAAc,GAAGD,WAAW,EAAE;;IAEpC;IACA,MAAME,MAAM,GAAGZ,KAAK,CAACY,MAAM;IAC3B,MAAMC,eAAe,GAAGF,cAAc,GAAGC,MAAM;IAE/C,IAAIA,MAAM,GAAG,EAAE,IAAIA,MAAM,GAAG,CAAC,EAAE,EAAE,CAEjC,CAAC,MAAM,IAAIA,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,CAAC,EAAE,EAAE;MACxCP,iBAAiB,EAAE;MACnBD,OAAO,CAACO,cAAc,CAAC;IAE3B,CAAC,MAAM;MAAE;;MAEL,IAAIE,eAAe,GAAG,EAAE,EAAE;QACtBR,iBAAiB,EAAE;QACnBD,OAAO,CAACS,eAAe,GAAG,EAAE,CAAC;MACjC,CAAC,MACI,IAAIA,eAAe,GAAG,CAAC,EAAE;QAC1BC,OAAO,CAACb,QAAQ,CAAC;QACjBa,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;QACjDV,iBAAiB,EAAE;QACnBS,OAAO,CAACb,QAAQ,CAAC;QACjBG,OAAO,CAAC,EAAE,GAAGS,eAAe,CAAC;MACjC,CAAC,MACI;QACDT,OAAO,CAACS,eAAe,CAAC;MAC5B;IACJ;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOV,IAAI,GAAG,GAAG,GAAGF,QAAQ;AAChC,CAAC;AAAA,GAxEKF,IAAI;AAAA,KAAJA,IAAI;AA0EV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}