{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SearchLocation.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport processed_locations from '../../data/processed_locations.json';\nimport '../../Styles/searchBar.css';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchLocation = () => {\n  _s();\n  const [isFocused, setIsFocused] = useState(false);\n  const [searchValue, setSearchValue] = useState(null);\n  const [previousQuery, setPreviousQuery] = useState(null);\n  const initialQuery = [];\n  const [queryResult, setQueryResult] = useState(initialQuery);\n  const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\n  const handleChange = newValue => {\n    setSearchValue(newValue);\n  };\n  useEffect(() => {\n    queryLocations(searchValue);\n  }, [searchValue]);\n  const doWordArraysMatch = function (userQueryWordsArray, locationWordsArray) {\n    let startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    let endIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : userQueryWordsArray.length;\n    for (let i = startIndex; i < endIndex; i++) {\n      const regexExpr = '^' + userQueryWordsArray[i];\n      const regexQuery = new RegExp(regexExpr);\n      if (!regexQuery.test(locationWordsArray[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const queryLocations = query => {\n    if (query === '' || query === null || query === undefined) return;\n    if (query.length < 3) {\n      setQueryResult([]);\n      return; //only query after atleast 3 letters, reduces lag\n    }\n\n    const queryWithoutPunc = query.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\");\n    const queryLowercase = queryWithoutPunc.toLowerCase().trim();\n    const queryArray = queryLowercase.split(/\\s+/);\n\n    //cache previous search result\n    if (queryArray === previousQuery) return;else setPreviousQuery(queryArray);\n    const citiesQueryResults = [];\n    processed_locations.forEach(country => {\n      country.states.forEach(state => {\n        state.cities.forEach(city => {\n          const lowercaseCity = city.toLowerCase();\n          const cityArray = lowercaseCity.split(/\\s+/);\n          const numCityWords = cityArray.length;\n          const lowercaseState = state.name.toLowerCase();\n          const stateArray = lowercaseState.split(/\\s+/);\n          const numStateWords = stateArray.length;\n          const lowercaseCountry = country.name.toLowerCase();\n          const countryArray = lowercaseCountry.split(/\\s+/);\n          const numCountryWords = countryArray.length;\n          const regexExpr = '^' + queryArray[0];\n          const regexQuery = new RegExp(regexExpr);\n          let doesCityMatch = false;\n\n          /* console.log('///////////////////////////');\r\n          console.log('Query: ' + queryArray);\r\n          console.log('City: ' + cityArray);\r\n          console.log('State: ' + stateArray);\r\n          console.log('Country: ' + countryArray); */\n\n          //this search assumes the user types in the city name first\n\n          //initial filter to lower matching results\n          if (regexQuery.test(lowercaseCity)) {\n            //2 cases if there is a match:\n            //user query has less words than city name\n            //or user query has more words than city name\n            //in either case check if it matches the city first\n            if (queryArray.length <= numCityWords) {\n              //check if each word in the city matches each word in the query\n              doesCityMatch = doWordArraysMatch(queryArray, cityArray);\n            } else {\n              const prevQueryResult = queryResult;\n              const numWordsRetainingToStateOrCountry = queryArray.length - numCityWords;\n              const wordsRetainingToStateOrCountry = [];\n              for (let i = numCityWords; i < numWordsRetainingToStateOrCountry; i++) {\n                wordsRetainingToStateOrCountry.push(queryArray[i]);\n              }\n              prevQueryResult.forEach(location => {\n                //if matches state OR matches country\n                //push onto citiesQueryResults\n                if (doWordArraysMatch(wordsRetainingToStateOrCountry, stateArray) || doWordArraysMatch(wordsRetainingToStateOrCountry, countryArray)) {\n                  citiesQueryResults.push({\n                    'location': {\n                      'city': location === null || location === void 0 ? void 0 : location.city,\n                      'state': location === null || location === void 0 ? void 0 : location.state,\n                      'country': location === null || location === void 0 ? void 0 : location.country\n                    }\n                  });\n                }\n              });\n            }\n          }\n          if (doesCityMatch) {\n            citiesQueryResults.push({\n              'location': {\n                'city': city,\n                'state': state.name,\n                'country': country.name\n              }\n            });\n          }\n        });\n      });\n    });\n    const topResults = [];\n    citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item));\n    setQueryResult(topResults);\n  };\n  const handleDropDownSelect = (city, state, country) => {};\n  const countriesQueryResultsElements = queryResult.length === 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) : queryResult.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"queryResult\",\n    onClick: () => handleDropDownSelect(item.location.city, item.location.state, item.location.country),\n    children: '' + item.location.city + ', ' + item.location.state + ', ' + item.location.country\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this));\n  const dropDown = isFocused ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdownBorder border\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"dropdownLabel\",\n      htmlFor: \"dropdownResultsCountry\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Choose a city:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 76\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdownResults \",\n      children: countriesQueryResultsElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 34\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"location-search-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"location-search\",\n      type: \"text\",\n      name: \"cities\",\n      placeholder: \"Search for a city...\",\n      onChange: e => handleChange(document.getElementById(\"location-search\").value),\n      onFocus: () => setIsFocused(true),\n      onBlur: () => setIsFocused(false),\n      maxLength: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), dropDown]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n_s(SearchLocation, \"CIPLXBl2N1h3TvrwQ+ROZHGc71w=\");\n_c = SearchLocation;\nexport default SearchLocation;\nvar _c;\n$RefreshReg$(_c, \"SearchLocation\");","map":{"version":3,"names":["useState","useEffect","processed_locations","SearchLocation","isFocused","setIsFocused","searchValue","setSearchValue","previousQuery","setPreviousQuery","initialQuery","queryResult","setQueryResult","AMOUNT_OF_RESULTS_TO_DISPLAY","handleChange","newValue","queryLocations","doWordArraysMatch","userQueryWordsArray","locationWordsArray","startIndex","endIndex","length","i","regexExpr","regexQuery","RegExp","test","query","undefined","queryWithoutPunc","replace","queryLowercase","toLowerCase","trim","queryArray","split","citiesQueryResults","forEach","country","states","state","cities","city","lowercaseCity","cityArray","numCityWords","lowercaseState","name","stateArray","numStateWords","lowercaseCountry","countryArray","numCountryWords","doesCityMatch","prevQueryResult","numWordsRetainingToStateOrCountry","wordsRetainingToStateOrCountry","push","location","topResults","slice","map","item","handleDropDownSelect","countriesQueryResultsElements","index","dropDown","e","document","getElementById","value"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SearchLocation.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport processed_locations from '../../data/processed_locations.json'\r\n\r\nimport '../../Styles/searchBar.css';\r\n\r\nconst SearchLocation = () => {\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [searchValue, setSearchValue] = useState(null);\r\n    const [previousQuery, setPreviousQuery] = useState(null);\r\n    const initialQuery = [];\r\n    const [queryResult, setQueryResult] = useState(initialQuery);\r\n\r\n    const AMOUNT_OF_RESULTS_TO_DISPLAY = 10;\r\n\r\n    const handleChange = (newValue) => {\r\n        setSearchValue(newValue);\r\n    }\r\n\r\n    useEffect(() => {\r\n        queryLocations(searchValue);\r\n\r\n    }, [searchValue])\r\n\r\n    const doWordArraysMatch = (userQueryWordsArray, locationWordsArray, startIndex = 0, endIndex = userQueryWordsArray.length) => {\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n            const regexExpr = '^' + userQueryWordsArray[i];\r\n            const regexQuery = new RegExp(regexExpr);\r\n\r\n            if (!regexQuery.test(locationWordsArray[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const queryLocations = (query) => {\r\n\r\n        if (query === '' || query === null || query === undefined) return;\r\n        if(query.length < 3){\r\n            setQueryResult([]);\r\n            return; //only query after atleast 3 letters, reduces lag\r\n        } \r\n\r\n        const queryWithoutPunc = query.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\");\r\n        const queryLowercase = queryWithoutPunc.toLowerCase().trim();\r\n        const queryArray = queryLowercase.split(/\\s+/);\r\n\r\n        //cache previous search result\r\n        if(queryArray === previousQuery) return;\r\n        else setPreviousQuery(queryArray);\r\n\r\n        const citiesQueryResults = []\r\n        processed_locations.forEach(country => {\r\n            country.states.forEach(state => {\r\n                state.cities.forEach(city => {\r\n\r\n                    const lowercaseCity = city.toLowerCase();\r\n                    const cityArray = lowercaseCity.split(/\\s+/);\r\n                    const numCityWords = cityArray.length;\r\n\r\n                    const lowercaseState = state.name.toLowerCase();\r\n                    const stateArray = lowercaseState.split(/\\s+/);\r\n                    const numStateWords = stateArray.length;\r\n\r\n                    const lowercaseCountry = country.name.toLowerCase();\r\n                    const countryArray = lowercaseCountry.split(/\\s+/);\r\n                    const numCountryWords = countryArray.length;\r\n\r\n\r\n                    const regexExpr = '^' + queryArray[0];\r\n                    const regexQuery = new RegExp(regexExpr);\r\n                    let doesCityMatch = false;\r\n\r\n                    \r\n                    /* console.log('///////////////////////////');\r\n                    console.log('Query: ' + queryArray);\r\n                    console.log('City: ' + cityArray);\r\n                    console.log('State: ' + stateArray);\r\n                    console.log('Country: ' + countryArray); */\r\n\r\n                    //this search assumes the user types in the city name first\r\n\r\n                    //initial filter to lower matching results\r\n                    if (regexQuery.test(lowercaseCity)) {\r\n\r\n                        //2 cases if there is a match:\r\n                        //user query has less words than city name\r\n                        //or user query has more words than city name\r\n                        //in either case check if it matches the city first\r\n                        if (queryArray.length <= numCityWords) {\r\n\r\n                            //check if each word in the city matches each word in the query\r\n                            doesCityMatch = doWordArraysMatch(queryArray, cityArray)\r\n                        }\r\n                        else {\r\n                            const prevQueryResult = queryResult;\r\n                            const numWordsRetainingToStateOrCountry = queryArray.length - numCityWords;\r\n                            const wordsRetainingToStateOrCountry = [];\r\n                            for(let i=numCityWords; i<numWordsRetainingToStateOrCountry; i++){\r\n                                wordsRetainingToStateOrCountry.push(queryArray[i]);\r\n                            }\r\n                            prevQueryResult.forEach(location => {\r\n                                //if matches state OR matches country\r\n                                //push onto citiesQueryResults\r\n                                if(doWordArraysMatch(wordsRetainingToStateOrCountry,stateArray) || doWordArraysMatch(wordsRetainingToStateOrCountry,countryArray)){\r\n                                    citiesQueryResults.push({\r\n                                        'location': {\r\n                                            'city': location?.city,\r\n                                            'state': location?.state,\r\n                                            'country': location?.country\r\n                                        }\r\n                                    });\r\n                                }\r\n                            })\r\n                        } \r\n                    }\r\n                    if (doesCityMatch) {\r\n                        citiesQueryResults.push({\r\n                            'location': {\r\n                                'city': city,\r\n                                'state': state.name,\r\n                                'country': country.name\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n            })\r\n\r\n        })\r\n        const topResults = [];\r\n        citiesQueryResults.slice(0, AMOUNT_OF_RESULTS_TO_DISPLAY - 1).map(item => topResults.push(item))\r\n        setQueryResult(topResults);\r\n    }\r\n\r\n    const handleDropDownSelect = (city, state, country) => {\r\n\r\n    }\r\n\r\n    const countriesQueryResultsElements = queryResult.length === 0 ? <></> : queryResult.map((item, index) =>\r\n        <div\r\n            className=\"queryResult\"\r\n            key={index}\r\n            onClick={() => handleDropDownSelect(item.location.city, item.location.state, item.location.country)}\r\n        >\r\n            {'' + item.location.city + ', ' + item.location.state + ', ' + item.location.country}\r\n        </div>\r\n    );\r\n\r\n    const dropDown = isFocused ? <div className=\"dropdownBorder border\">\r\n        <label className=\"dropdownLabel\" htmlFor=\"dropdownResultsCountry\" ><b>Choose a city:</b></label>\r\n        <div className=\"dropdownResults \">{countriesQueryResultsElements}</div>\r\n    </div> : <></>;\r\n\r\n    return (\r\n        <div id=\"location-search-container\">\r\n            <input id=\"location-search\"\r\n                type=\"text\"\r\n                name=\"cities\"\r\n                placeholder={\"Search for a city...\"}\r\n                onChange={(e) => handleChange(document.getElementById(\"location-search\").value)}\r\n                onFocus={() => setIsFocused(true)}\r\n                onBlur={() => setIsFocused(false)}\r\n                maxLength={100}\r\n            />\r\n            {dropDown}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default SearchLocation"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}