{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Atoms\\\\SelectCity.js\",\n  _s = $RefreshSig$();\nimport Select from 'react-select';\nimport { useGetCitiesQuery } from '../Features/locations/locationApiSlice';\nimport './../Styles/addLocation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCity = props => {\n  _s();\n  const {\n    data,\n    currentData,\n    isSuccess\n  } = useGetCitiesQuery({\n    \"country\": props.country,\n    \"state\": props.state\n  });\n  const cities = isSuccess ? currentData ? currentData.data : data.data : [];\n  const optionsCities = [];\n  cities.forEach(item => {\n    optionsCities.push({\n      value: item.city,\n      label: item.city\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      options: optionsCities,\n      onChange: newValue => {\n        props.setCity(newValue.value);\n        this.forceUpdate();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"note\",\n      children: \"Note: If no options for cities, then there are no active stations reporting weather data in that state.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectCity, \"KLZeb7qxiCkWWuG0wjgXEw/mplY=\", false, function () {\n  return [useGetCitiesQuery];\n});\n_c = SelectCity;\nexport default SelectCity;\nvar _c;\n$RefreshReg$(_c, \"SelectCity\");","map":{"version":3,"names":["Select","useGetCitiesQuery","SelectCity","props","data","currentData","isSuccess","country","state","cities","optionsCities","forEach","item","push","value","city","label","newValue","setCity","forceUpdate"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Atoms/SelectCity.js"],"sourcesContent":["import Select from 'react-select'\r\nimport { useGetCitiesQuery } from '../Features/locations/locationApiSlice'\r\n\r\nimport './../Styles/addLocation.css'\r\n\r\n\r\nconst SelectCity = (props) => {\r\n\r\n    const { data, currentData, isSuccess } = useGetCitiesQuery({ \"country\": props.country, \"state\": props.state });\r\n    const cities = isSuccess ? currentData ? currentData.data : data.data : [];\r\n    const optionsCities = [];\r\n    cities.forEach(item => {\r\n        optionsCities.push({\r\n            value: item.city,\r\n            label: item.city\r\n        });\r\n    });\r\n    return (\r\n        <div>\r\n            <span>City</span>\r\n            <br />\r\n            <Select\r\n                options={optionsCities}\r\n                onChange={(newValue) => {\r\n                    props.setCity(newValue.value);\r\n                    this.forceUpdate();\r\n                }\r\n                }\r\n            />\r\n            <span className='note'>Note: If no options for cities, then there are no active stations reporting weather data in that state.</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCity"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,SAASC,iBAAiB,QAAQ,wCAAwC;AAE1E,OAAO,6BAA6B;AAAA;AAGpC,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAE1B,MAAM;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAU,CAAC,GAAGL,iBAAiB,CAAC;IAAE,SAAS,EAAEE,KAAK,CAACI,OAAO;IAAE,OAAO,EAAEJ,KAAK,CAACK;EAAM,CAAC,CAAC;EAC9G,MAAMC,MAAM,GAAGH,SAAS,GAAGD,WAAW,GAAGA,WAAW,CAACD,IAAI,GAAGA,IAAI,CAACA,IAAI,GAAG,EAAE;EAC1E,MAAMM,aAAa,GAAG,EAAE;EACxBD,MAAM,CAACE,OAAO,CAACC,IAAI,IAAI;IACnBF,aAAa,CAACG,IAAI,CAAC;MACfC,KAAK,EAAEF,IAAI,CAACG,IAAI;MAChBC,KAAK,EAAEJ,IAAI,CAACG;IAChB,CAAC,CAAC;EACN,CAAC,CAAC;EACF,oBACI;IAAA,wBACI;MAAA,UAAM;IAAI;MAAA;MAAA;MAAA;IAAA,QAAO,eACjB;MAAA;MAAA;MAAA;IAAA,QAAM,eACN,QAAC,MAAM;MACH,OAAO,EAAEL,aAAc;MACvB,QAAQ,EAAGO,QAAQ,IAAK;QACpBd,KAAK,CAACe,OAAO,CAACD,QAAQ,CAACH,KAAK,CAAC;QAC7B,IAAI,CAACK,WAAW,EAAE;MACtB;IACC;MAAA;MAAA;MAAA;IAAA,QACH,eACF;MAAM,SAAS,EAAC,MAAM;MAAA,UAAC;IAAuG;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA,QACnI;AAEd,CAAC;AAAA,GA1BKjB,UAAU;EAAA,QAE6BD,iBAAiB;AAAA;AAAA,KAFxDC,UAAU;AA4BhB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}