{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  locations: [],\n  currentLocation: {\n    \"city\": null,\n    \"province\": null,\n    \"country\": null,\n    \"latitude\": null,\n    \"longitude\": null,\n    \"id\": null\n  }\n};\n\n//must make a fucntion out of array.includes\n//because filter only accepts functions not methods on an object\nconst isInArray = (num, list) => {\n  return list.includes(num);\n};\nconst locationsSlice = createSlice({\n  name: 'locations',\n  initialState,\n  reducers: {\n    setUserLocations: (state, action) => {\n      const {\n        locations\n      } = action.payload;\n      state.locations = locations;\n    },\n    addLocation: (state, action) => {\n      const {\n        city,\n        province,\n        country,\n        latitude,\n        longitude,\n        id\n      } = action.payload;\n      state.locations = [...state.locations, {\n        \"city\": city,\n        \"province\": province,\n        \"country\": country,\n        \"latitude\": latitude,\n        \"longitude\": longitude,\n        \"id\": id\n      }];\n    },\n    deleteLocations: (state, action) => {\n      const {\n        ids\n      } = action.payload;\n      console.log(ids);\n      const locationsAfterRemoval = state.locations.filter(location => !isInArray(location.id, ids));\n      state.locations = locationsAfterRemoval;\n      console.log('after removal: ');\n      console.log(locationsAfterRemoval);\n    },\n    setCurrentLocation: (state, action) => {\n      const {\n        city,\n        province,\n        country,\n        latitude,\n        longitude,\n        id\n      } = action.payload;\n      state.currentLocation = {\n        \"city\": city,\n        \"province\": province,\n        \"country\": country,\n        \"latitude\": latitude,\n        \"longitude\": longitude,\n        \"id\": id //unique database id\n      };\n    }\n  }\n});\n\nexport const {\n  addLocation,\n  setUserLocations,\n  setCurrentLocation,\n  deleteLocations\n} = locationsSlice.actions;\nexport default locationsSlice.reducer;\nexport const selectAllLocations = state => state.locations.locations;\nexport const selectCurrentLocation = state => state.locations.currentLocation;","map":{"version":3,"names":["createSlice","initialState","locations","currentLocation","isInArray","num","list","includes","locationsSlice","name","reducers","setUserLocations","state","action","payload","addLocation","city","province","country","latitude","longitude","id","deleteLocations","ids","console","log","locationsAfterRemoval","filter","location","setCurrentLocation","actions","reducer","selectAllLocations","selectCurrentLocation"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Features/locations/locationsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    locations: [],\r\n    currentLocation: {\r\n        \"city\": null,\r\n        \"province\": null,\r\n        \"country\": null,\r\n        \"latitude\": null,\r\n        \"longitude\": null,\r\n        \"id\": null\r\n    }\r\n};\r\n\r\n//must make a fucntion out of array.includes\r\n//because filter only accepts functions not methods on an object\r\nconst isInArray = (num,list) =>{\r\n    return list.includes(num);\r\n}\r\n\r\nconst locationsSlice = createSlice({\r\n    name: 'locations',\r\n    initialState,\r\n    reducers: {\r\n        setUserLocations: (state, action) => {\r\n            const {locations}  = action.payload;\r\n            state.locations = locations;\r\n\r\n        },\r\n        addLocation: (state, action) => {\r\n            const { city, province, country, latitude, longitude, id } = action.payload;\r\n            state.locations = [...state.locations, {\r\n                \"city\": city,\r\n                \"province\": province,\r\n                \"country\": country,\r\n                \"latitude\": latitude,\r\n                \"longitude\": longitude,\r\n                \"id\" : id\r\n            }]\r\n        },\r\n        deleteLocations: (state, action) => {\r\n            const {ids} = action.payload;\r\n            console.log(ids);\r\n            const locationsAfterRemoval = state.locations.filter(location => !isInArray(location.id,ids));\r\n            state.locations = locationsAfterRemoval;\r\n            console.log('after removal: ');\r\n            console.log(locationsAfterRemoval);\r\n        },  \r\n        setCurrentLocation: (state, action) => {\r\n            const { city, province, country, latitude, longitude, id } = action.payload;\r\n            state.currentLocation = {\r\n                \"city\": city,\r\n                \"province\": province,\r\n                \"country\": country,\r\n                \"latitude\": latitude,\r\n                \"longitude\": longitude,\r\n                \"id\" : id //unique database id\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addLocation, setUserLocations, setCurrentLocation, deleteLocations } = locationsSlice.actions;\r\n\r\nexport default locationsSlice.reducer;\r\n\r\nexport const selectAllLocations = (state) => state.locations.locations;\r\n\r\nexport const selectCurrentLocation = (state) => state.locations.currentLocation;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE,EAAE;EACbC,eAAe,EAAE;IACb,MAAM,EAAE,IAAI;IACZ,UAAU,EAAE,IAAI;IAChB,SAAS,EAAE,IAAI;IACf,UAAU,EAAE,IAAI;IAChB,WAAW,EAAE,IAAI;IACjB,IAAI,EAAE;EACV;AACJ,CAAC;;AAED;AACA;AACA,MAAMC,SAAS,GAAG,CAACC,GAAG,EAACC,IAAI,KAAI;EAC3B,OAAOA,IAAI,CAACC,QAAQ,CAACF,GAAG,CAAC;AAC7B,CAAC;AAED,MAAMG,cAAc,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,WAAW;EACjBR,YAAY;EACZS,QAAQ,EAAE;IACNC,gBAAgB,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAACX;MAAS,CAAC,GAAIW,MAAM,CAACC,OAAO;MACnCF,KAAK,CAACV,SAAS,GAAGA,SAAS;IAE/B,CAAC;IACDa,WAAW,EAAE,CAACH,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAM;QAAEG,IAAI;QAAEC,QAAQ;QAAEC,OAAO;QAAEC,QAAQ;QAAEC,SAAS;QAAEC;MAAG,CAAC,GAAGR,MAAM,CAACC,OAAO;MAC3EF,KAAK,CAACV,SAAS,GAAG,CAAC,GAAGU,KAAK,CAACV,SAAS,EAAE;QACnC,MAAM,EAAEc,IAAI;QACZ,UAAU,EAAEC,QAAQ;QACpB,SAAS,EAAEC,OAAO;QAClB,UAAU,EAAEC,QAAQ;QACpB,WAAW,EAAEC,SAAS;QACtB,IAAI,EAAGC;MACX,CAAC,CAAC;IACN,CAAC;IACDC,eAAe,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAM;QAACU;MAAG,CAAC,GAAGV,MAAM,CAACC,OAAO;MAC5BU,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChB,MAAMG,qBAAqB,GAAGd,KAAK,CAACV,SAAS,CAACyB,MAAM,CAACC,QAAQ,IAAI,CAACxB,SAAS,CAACwB,QAAQ,CAACP,EAAE,EAACE,GAAG,CAAC,CAAC;MAC7FX,KAAK,CAACV,SAAS,GAAGwB,qBAAqB;MACvCF,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BD,OAAO,CAACC,GAAG,CAACC,qBAAqB,CAAC;IACtC,CAAC;IACDG,kBAAkB,EAAE,CAACjB,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAM;QAAEG,IAAI;QAAEC,QAAQ;QAAEC,OAAO;QAAEC,QAAQ;QAAEC,SAAS;QAAEC;MAAG,CAAC,GAAGR,MAAM,CAACC,OAAO;MAC3EF,KAAK,CAACT,eAAe,GAAG;QACpB,MAAM,EAAEa,IAAI;QACZ,UAAU,EAAEC,QAAQ;QACpB,SAAS,EAAEC,OAAO;QAClB,UAAU,EAAEC,QAAQ;QACpB,WAAW,EAAEC,SAAS;QACtB,IAAI,EAAGC,EAAE,CAAC;MACd,CAAC;IACL;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEN,WAAW;EAAEJ,gBAAgB;EAAEkB,kBAAkB;EAAEP;AAAgB,CAAC,GAAGd,cAAc,CAACsB,OAAO;AAE5G,eAAetB,cAAc,CAACuB,OAAO;AAErC,OAAO,MAAMC,kBAAkB,GAAIpB,KAAK,IAAKA,KAAK,CAACV,SAAS,CAACA,SAAS;AAEtE,OAAO,MAAM+B,qBAAqB,GAAIrB,KAAK,IAAKA,KAAK,CAACV,SAAS,CAACC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}