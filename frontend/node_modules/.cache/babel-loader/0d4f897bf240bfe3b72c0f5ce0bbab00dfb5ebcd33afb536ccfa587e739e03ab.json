{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  const [meridiem, setMeridiem] = useState('AM'); //AM or PM\n  const [time, setTime] = useState(\"1\"); //time to be displayed\n\n  const swapMeridiemValue = () => {\n    if (meridiem === 'AM') setMeridiem('PM');else setMeridiem('AM');\n  };\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\n    const militaryHour = parseInt(props.number.slice(0, 2));\n    const regularHour = militaryHour > 12 ? () => {\n      setMeridiem('PM');\n      return militaryHour - 12;\n    } : () => {\n      if (militaryHour === 12) {\n        setMeridiem('PM');\n        return militaryHour;\n      } else if (militaryHour === 0) {\n        setMeridiem('AM');\n        return 12;\n      } else {\n        setMeridiem('AM');\n        return militaryHour;\n      }\n    };\n    const regularHourUTC = regularHour();\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    if (offset > 12 || offset < -12) {} else if (offset === 12 || offset === -12) {\n      if (meridiem === 'AM') setMeridiem('PM');else setMeridiem('AM');\n      setTime(regularHourUTC);\n    } else {\n      //offset < 12\n      const afterOffsetHour = regularHourUTC + offset;\n      if (afterOffsetHour > 12) {} else if (afterOffsetHour < 1) {} else {\n        setTime(afterOffsetHour);\n      }\n    }\n    setTime(regularHourUTC);\n  }, []);\n  return time + ' ' + meridiem;\n};\n_s(Time, \"nWPZ/s183JkcsQnperLnWlrfpIE=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","setMeridiem","time","setTime","swapMeridiemValue","militaryHour","parseInt","number","slice","regularHour","regularHourUTC","offset","afterOffsetHour"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    const [meridiem, setMeridiem] = useState('AM'); //AM or PM\r\n    const [time, setTime] = useState(\"1\"); //time to be displayed\r\n\r\n    const swapMeridiemValue = () =>{\r\n        if(meridiem === 'AM') setMeridiem('PM');\r\n        else setMeridiem('AM');\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n\r\n        const regularHour = militaryHour > 12 ? () => {\r\n            setMeridiem('PM');\r\n            return militaryHour - 12\r\n        } : () => {\r\n            \r\n            if(militaryHour === 12){\r\n                setMeridiem('PM');\r\n                return militaryHour;\r\n            }\r\n            else if (militaryHour === 0) {\r\n                setMeridiem('AM');\r\n                return 12;\r\n            }\r\n            else {\r\n                setMeridiem('AM');\r\n                return militaryHour;\r\n            }\r\n            \r\n        };\r\n        const regularHourUTC = regularHour();\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n\r\n        if (offset > 12 || offset < -12) {\r\n\r\n        } else if (offset === 12 || offset === -12) {\r\n            if(meridiem === 'AM') setMeridiem('PM');\r\n            else setMeridiem('AM');\r\n\r\n            setTime(regularHourUTC);\r\n        } else { //offset < 12\r\n            const afterOffsetHour = regularHourUTC + offset;\r\n            if(afterOffsetHour > 12){\r\n                \r\n            }\r\n            else if( afterOffsetHour < 1){\r\n                \r\n            }\r\n            else{\r\n                setTime(afterOffsetHour);\r\n            }\r\n        }\r\n\r\n\r\n\r\n        setTime(regularHourUTC);\r\n\r\n    }, [])\r\n\r\n    return time + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEvC,MAAMQ,iBAAiB,GAAG,MAAK;IAC3B,IAAGJ,QAAQ,KAAK,IAAI,EAAEC,WAAW,CAAC,IAAI,CAAC,CAAC,KACnCA,WAAW,CAAC,IAAI,CAAC;EAC1B,CAAC;EAGDJ,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMQ,YAAY,GAAGC,QAAQ,CAACP,KAAK,CAACQ,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEvD,MAAMC,WAAW,GAAGJ,YAAY,GAAG,EAAE,GAAG,MAAM;MAC1CJ,WAAW,CAAC,IAAI,CAAC;MACjB,OAAOI,YAAY,GAAG,EAAE;IAC5B,CAAC,GAAG,MAAM;MAEN,IAAGA,YAAY,KAAK,EAAE,EAAC;QACnBJ,WAAW,CAAC,IAAI,CAAC;QACjB,OAAOI,YAAY;MACvB,CAAC,MACI,IAAIA,YAAY,KAAK,CAAC,EAAE;QACzBJ,WAAW,CAAC,IAAI,CAAC;QACjB,OAAO,EAAE;MACb,CAAC,MACI;QACDA,WAAW,CAAC,IAAI,CAAC;QACjB,OAAOI,YAAY;MACvB;IAEJ,CAAC;IACD,MAAMK,cAAc,GAAGD,WAAW,EAAE;IACpC;IACA,MAAME,MAAM,GAAGZ,KAAK,CAACY,MAAM;IAE3B,IAAIA,MAAM,GAAG,EAAE,IAAIA,MAAM,GAAG,CAAC,EAAE,EAAE,CAEjC,CAAC,MAAM,IAAIA,MAAM,KAAK,EAAE,IAAIA,MAAM,KAAK,CAAC,EAAE,EAAE;MACxC,IAAGX,QAAQ,KAAK,IAAI,EAAEC,WAAW,CAAC,IAAI,CAAC,CAAC,KACnCA,WAAW,CAAC,IAAI,CAAC;MAEtBE,OAAO,CAACO,cAAc,CAAC;IAC3B,CAAC,MAAM;MAAE;MACL,MAAME,eAAe,GAAGF,cAAc,GAAGC,MAAM;MAC/C,IAAGC,eAAe,GAAG,EAAE,EAAC,CAExB,CAAC,MACI,IAAIA,eAAe,GAAG,CAAC,EAAC,CAE7B,CAAC,MACG;QACAT,OAAO,CAACS,eAAe,CAAC;MAC5B;IACJ;IAIAT,OAAO,CAACO,cAAc,CAAC;EAE3B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOR,IAAI,GAAG,GAAG,GAAGF,QAAQ;AAChC,CAAC;AAAA,GAlEKF,IAAI;AAAA,KAAJA,IAAI;AAoEV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}