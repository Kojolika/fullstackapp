{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  const [meridiem, setMeridiem] = useState(''); //AM or PM\n  const [time, setTime] = useState(\"1\");\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\n    const number = parseInt(props.number.slice(0, 2));\n\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const afterOffset = number + props.offset;\n    console.log('After offset: ' + afterOffset);\n\n    //convert from military time on initial render a\n    if (afterOffset > 12 || afterOffset < 0) setMeridiem('PM');else setMeridiem('AM');\n    const finaltime = afterOffset < 0 ? (afterOffset + 12) % 12 : afterOffset === 0 ? 12 : afterOffset % 12;\n    setTime(finaltime);\n  }, []);\n  console.log(time + ' ' + meridiem);\n  return time + ' ' + meridiem;\n};\n_s(Time, \"6B/LinxmL5q6JB6xdYHHw+lw4YE=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","setMeridiem","time","setTime","number","parseInt","slice","afterOffset","offset","console","log","finaltime"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    const [meridiem, setMeridiem] = useState(''); //AM or PM\r\n    const [time, setTime] = useState(\"1\");\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\r\n        const number = parseInt(props.number.slice(0, 2));\r\n\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const afterOffset = number + props.offset;\r\n\r\n        console.log('After offset: ' + afterOffset);\r\n\r\n        //convert from military time on initial render a\r\n        if (afterOffset > 12 || afterOffset < 0) setMeridiem('PM');\r\n        else setMeridiem('AM');\r\n\r\n        const finaltime = afterOffset < 0 ? (afterOffset + 12) % 12 : afterOffset === 0 ? 12 : afterOffset % 12;\r\n\r\n        setTime(finaltime);\r\n\r\n    }, [])\r\n\r\n\r\n    console.log(time + ' ' + meridiem);\r\n    return time + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC;EAGrCC,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMO,MAAM,GAAGC,QAAQ,CAACN,KAAK,CAACK,MAAM,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEjD;IACA,MAAMC,WAAW,GAAGH,MAAM,GAAGL,KAAK,CAACS,MAAM;IAEzCC,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGH,WAAW,CAAC;;IAE3C;IACA,IAAIA,WAAW,GAAG,EAAE,IAAIA,WAAW,GAAG,CAAC,EAAEN,WAAW,CAAC,IAAI,CAAC,CAAC,KACtDA,WAAW,CAAC,IAAI,CAAC;IAEtB,MAAMU,SAAS,GAAGJ,WAAW,GAAG,CAAC,GAAG,CAACA,WAAW,GAAG,EAAE,IAAI,EAAE,GAAGA,WAAW,KAAK,CAAC,GAAG,EAAE,GAAGA,WAAW,GAAG,EAAE;IAEvGJ,OAAO,CAACQ,SAAS,CAAC;EAEtB,CAAC,EAAE,EAAE,CAAC;EAGNF,OAAO,CAACC,GAAG,CAACR,IAAI,GAAG,GAAG,GAAGF,QAAQ,CAAC;EAClC,OAAOE,IAAI,GAAG,GAAG,GAAGF,QAAQ;AAChC,CAAC;AAAA,GA7BKF,IAAI;AAAA,KAAJA,IAAI;AA+BV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}