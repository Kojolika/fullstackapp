{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nconst Time = props => {\n  _s();\n  const [meridiem, setMeridiem] = useState('AM'); //AM or PM\n  const [time, setTime] = useState(\"1\"); //time to be displayed\n\n  useEffect(() => {\n    //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\n    const militaryHour = parseInt(props.number.slice(0, 2));\n    const regularHour = militaryHour > 12 ? () => {\n      setMeridiem('PM');\n      return militaryHour - 12;\n    } : () => {\n      setMeridiem('AM');\n      if (militaryHour === 0) return 12;else return militaryHour;\n    };\n    const regularHourUTC = regularHour();\n    //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\n    const offset = props.offset;\n    if (offset > 12) {} else if (offset === 12) {} else {}\n    const afterOffset = offset > 12 ? 'placeholder' : offset === 12 ? 'placeholder' : 'placeholder'; //offset < 12\n\n    setTime(regularHourUTC);\n  }, []);\n  return time + ' ' + meridiem;\n};\n_s(Time, \"nWPZ/s183JkcsQnperLnWlrfpIE=\");\n_c = Time;\nexport default Time;\nvar _c;\n$RefreshReg$(_c, \"Time\");","map":{"version":3,"names":["useState","useEffect","Time","props","meridiem","setMeridiem","time","setTime","militaryHour","parseInt","number","slice","regularHour","regularHourUTC","offset","afterOffset"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/Time.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst Time = (props) => {\r\n\r\n    const [meridiem, setMeridiem] = useState('AM'); //AM or PM\r\n    const [time, setTime] = useState(\"1\"); //time to be displayed\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        //Assumption is that props.number is a string in the form 'HH:MM' where HH is the hour and MM is the minute\r\n        const militaryHour = parseInt(props.number.slice(0, 2));\r\n\r\n        const regularHour = militaryHour > 12 ? () =>{\r\n            setMeridiem('PM');\r\n            return militaryHour - 12\r\n        } : () =>{\r\n            setMeridiem('AM');\r\n            if(militaryHour === 0 ) return 12\r\n            else return militaryHour\r\n        };\r\n        const regularHourUTC = regularHour();\r\n        //props.offset is the offset number (+ or -) that converts this time from the UTC timezone to the local time\r\n        const offset = props.offset;\r\n\r\n        if(offset > 12 ){\r\n\r\n        }else if(offset === 12){\r\n\r\n        }else{\r\n            \r\n        }\r\n        const afterOffset = offset > 12 ? 'placeholder'\r\n        : offset === 12 ? 'placeholder'\r\n        : 'placeholder' //offset < 12\r\n\r\n        \r\n\r\n        setTime(regularHourUTC);\r\n\r\n    }, [])\r\n\r\n    return time + ' ' + meridiem;\r\n}\r\n\r\nexport default Time"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EAEpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAChD,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;;EAGvCC,SAAS,CAAC,MAAM;IAEZ;IACA,MAAMO,YAAY,GAAGC,QAAQ,CAACN,KAAK,CAACO,MAAM,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAEvD,MAAMC,WAAW,GAAGJ,YAAY,GAAG,EAAE,GAAG,MAAK;MACzCH,WAAW,CAAC,IAAI,CAAC;MACjB,OAAOG,YAAY,GAAG,EAAE;IAC5B,CAAC,GAAG,MAAK;MACLH,WAAW,CAAC,IAAI,CAAC;MACjB,IAAGG,YAAY,KAAK,CAAC,EAAG,OAAO,EAAE,MAC5B,OAAOA,YAAY;IAC5B,CAAC;IACD,MAAMK,cAAc,GAAGD,WAAW,EAAE;IACpC;IACA,MAAME,MAAM,GAAGX,KAAK,CAACW,MAAM;IAE3B,IAAGA,MAAM,GAAG,EAAE,EAAE,CAEhB,CAAC,MAAK,IAAGA,MAAM,KAAK,EAAE,EAAC,CAEvB,CAAC,MAAI,CAEL;IACA,MAAMC,WAAW,GAAGD,MAAM,GAAG,EAAE,GAAG,aAAa,GAC7CA,MAAM,KAAK,EAAE,GAAG,aAAa,GAC7B,aAAa,EAAC;;IAIhBP,OAAO,CAACM,cAAc,CAAC;EAE3B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOP,IAAI,GAAG,GAAG,GAAGF,QAAQ;AAChC,CAAC;AAAA,GAzCKF,IAAI;AAAA,KAAJA,IAAI;AA2CV,eAAeA,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}