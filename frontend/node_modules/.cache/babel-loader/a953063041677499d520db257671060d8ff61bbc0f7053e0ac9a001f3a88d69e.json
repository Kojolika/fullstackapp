{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SelectCountry.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useGetCountriesQuery } from '../../Features/locations/locationApiSlice';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCountry = props => {\n  _s();\n  const {\n    data: countriesList,\n    currentData: currentCountriesList,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetCountriesQuery();\n  const countries = isSuccess ? currentCountriesList ? currentCountriesList.data : countriesList.data : [];\n  const optionsCountries = [];\n  const loadingMessage = 'Loading Countries...';\n  useEffect(() => {\n    if (isError) props.setErrorMessage('No server response');else props.setErrorMessage('');\n  }, [isError]);\n  useEffect(() => {\n    countries.forEach(item => {\n      optionsCountries.push({\n        value: item.country,\n        label: item.country\n      });\n    });\n  }, [countriesList, currentCountriesList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"country\",\n      children: \"Country\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"country\",\n      options: optionsCountries,\n      loadingMessage: () => loadingMessage,\n      isLoading: isLoading ? true : false,\n      autoFocus: true,\n      onChange: newValue => {\n        props.setCountry(newValue.value);\n        props.setState();\n        props.setCity();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectCountry, \"f1PeGhxQpyaDBPvPvWJMhOqviic=\", false, function () {\n  return [useGetCountriesQuery];\n});\n_c = SelectCountry;\nexport default SelectCountry;\nvar _c;\n$RefreshReg$(_c, \"SelectCountry\");","map":{"version":3,"names":["React","useEffect","useGetCountriesQuery","Select","SelectCountry","props","data","countriesList","currentData","currentCountriesList","isLoading","isSuccess","isError","error","countries","optionsCountries","loadingMessage","setErrorMessage","forEach","item","push","value","country","label","newValue","setCountry","setState","setCity"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SelectCountry.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { useGetCountriesQuery } from '../../Features/locations/locationApiSlice';\r\nimport Select from 'react-select'\r\n\r\nconst SelectCountry = (props) => {\r\n\r\n    const { data: countriesList, currentData: currentCountriesList, isLoading, isSuccess, isError, error } = useGetCountriesQuery();\r\n    const countries = isSuccess ? currentCountriesList ? currentCountriesList.data : countriesList.data : [];\r\n    const optionsCountries = [];\r\n\r\n    const loadingMessage = 'Loading Countries...';\r\n\r\n    useEffect(()=>{\r\n        if (isError) props.setErrorMessage('No server response');\r\n        else props.setErrorMessage('');\r\n    },[isError])\r\n\r\n    useEffect(()=>{\r\n        \r\n        countries.forEach(item => {\r\n            optionsCountries.push({\r\n                value: item.country,\r\n                label: item.country\r\n            });\r\n        });\r\n    \r\n    },[countriesList, currentCountriesList])\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor='country'>Country</label>\r\n            <Select\r\n                id=\"country\"\r\n                options={optionsCountries}\r\n                loadingMessage={() => loadingMessage}\r\n                isLoading={isLoading ? true : false}\r\n                autoFocus={true}\r\n                onChange={(newValue) => {\r\n                    props.setCountry(newValue.value);\r\n                    props.setState();\r\n                    props.setCity();\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCountry"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,oBAAoB,QAAQ,2CAA2C;AAChF,OAAOC,MAAM,MAAM,cAAc;AAAA;AAEjC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAA;EAE7B,MAAM;IAAEC,IAAI,EAAEC,aAAa;IAAEC,WAAW,EAAEC,oBAAoB;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGX,oBAAoB,EAAE;EAC/H,MAAMY,SAAS,GAAGH,SAAS,GAAGF,oBAAoB,GAAGA,oBAAoB,CAACH,IAAI,GAAGC,aAAa,CAACD,IAAI,GAAG,EAAE;EACxG,MAAMS,gBAAgB,GAAG,EAAE;EAE3B,MAAMC,cAAc,GAAG,sBAAsB;EAE7Cf,SAAS,CAAC,MAAI;IACV,IAAIW,OAAO,EAAEP,KAAK,CAACY,eAAe,CAAC,oBAAoB,CAAC,CAAC,KACpDZ,KAAK,CAACY,eAAe,CAAC,EAAE,CAAC;EAClC,CAAC,EAAC,CAACL,OAAO,CAAC,CAAC;EAEZX,SAAS,CAAC,MAAI;IAEVa,SAAS,CAACI,OAAO,CAACC,IAAI,IAAI;MACtBJ,gBAAgB,CAACK,IAAI,CAAC;QAClBC,KAAK,EAAEF,IAAI,CAACG,OAAO;QACnBC,KAAK,EAAEJ,IAAI,CAACG;MAChB,CAAC,CAAC;IACN,CAAC,CAAC;EAEN,CAAC,EAAC,CAACf,aAAa,EAAEE,oBAAoB,CAAC,CAAC;EAExC,oBACI;IAAA,wBACI;MAAO,OAAO,EAAC,SAAS;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAQ,eACxC,QAAC,MAAM;MACH,EAAE,EAAC,SAAS;MACZ,OAAO,EAAEM,gBAAiB;MAC1B,cAAc,EAAE,MAAMC,cAAe;MACrC,SAAS,EAAEN,SAAS,GAAG,IAAI,GAAG,KAAM;MACpC,SAAS,EAAE,IAAK;MAChB,QAAQ,EAAGc,QAAQ,IAAK;QACpBnB,KAAK,CAACoB,UAAU,CAACD,QAAQ,CAACH,KAAK,CAAC;QAChChB,KAAK,CAACqB,QAAQ,EAAE;QAChBrB,KAAK,CAACsB,OAAO,EAAE;MACnB;IAAE;MAAA;MAAA;MAAA;IAAA,QACJ;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GAzCKvB,aAAa;EAAA,QAE0FF,oBAAoB;AAAA;AAAA,KAF3HE,aAAa;AA2CnB,eAAeA,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}