{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\amm98\\\\Documents\\\\fullstackapp\\\\frontend\\\\src\\\\Components\\\\Atoms\\\\SelectCity.js\",\n  _s = $RefreshSig$();\nimport Select from 'react-select';\nimport { useEffect } from 'react';\nimport { useGetCitiesQuery } from '../../Features/locations/locationApiSlice';\nimport './../../Styles/addLocation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SelectCity = props => {\n  _s();\n  const noOptionsSring = \"Note: If no options for cities, then there are no active stations reporting weather data in that state.\";\n  const {\n    data: cityList,\n    currentData: currentCityList,\n    isLoading,\n    isSuccess,\n    refetch\n  } = useGetCitiesQuery({\n    \"country\": props.country,\n    \"state\": props.state\n  });\n  const cities = isSuccess ? currentCityList ? currentCityList.data : cityList.data : [];\n  const optionsCities = [];\n  cities.forEach(item => {\n    optionsCities.push({\n      value: item.city,\n      label: item.city\n    });\n  });\n  const loadingMessage = 'Loading cities...';\n  useEffect(() => {\n    refetch();\n  }, [props.country, props.state]);\n  useEffect(() => {}, [currentCityList, cityList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"city\",\n      children: \"City\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"city\",\n      isLoading: isLoading ? true : false,\n      loadingMessage: () => loadingMessage,\n      options: optionsCities,\n      onChange: newValue => props.setCity(newValue.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"note\",\n      children: noOptionsSring\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(SelectCity, \"2tZ+70tL5QP95ZjM9ouURnaz/ss=\", false, function () {\n  return [useGetCitiesQuery];\n});\n_c = SelectCity;\nexport default SelectCity;\nvar _c;\n$RefreshReg$(_c, \"SelectCity\");","map":{"version":3,"names":["Select","useEffect","useGetCitiesQuery","SelectCity","props","noOptionsSring","data","cityList","currentData","currentCityList","isLoading","isSuccess","refetch","country","state","cities","optionsCities","forEach","item","push","value","city","label","loadingMessage","newValue","setCity"],"sources":["C:/Users/amm98/Documents/fullstackapp/frontend/src/Components/Atoms/SelectCity.js"],"sourcesContent":["import Select from 'react-select'\r\nimport { useEffect } from 'react'\r\nimport { useGetCitiesQuery } from '../../Features/locations/locationApiSlice'\r\n\r\nimport './../../Styles/addLocation.css'\r\n\r\n\r\nconst SelectCity = (props) => {\r\n\r\n    const noOptionsSring = \"Note: If no options for cities, then there are no active stations reporting weather data in that state.\";\r\n    const { data: cityList , currentData: currentCityList, isLoading, isSuccess, refetch } = useGetCitiesQuery({ \"country\": props.country, \"state\": props.state });\r\n    const cities = isSuccess ? currentCityList ? currentCityList.data : cityList.data : [];\r\n    const optionsCities = [];\r\n    cities.forEach(item => {\r\n        optionsCities.push({\r\n            value: item.city,\r\n            label: item.city\r\n        });\r\n    });\r\n\r\n    const loadingMessage = 'Loading cities...'\r\n\r\n\r\n    useEffect(() =>{\r\n        refetch();\r\n    },[props.country, props.state])\r\n\r\n    useEffect(() => {\r\n\r\n    },[currentCityList, cityList])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor='city'>City</label>\r\n            <br />\r\n            <Select\r\n                id=\"city\"\r\n                isLoading={isLoading ? true : false}\r\n                loadingMessage={() => loadingMessage}\r\n                options={optionsCities}\r\n                onChange={(newValue) => props.setCity(newValue.value)}\r\n            />\r\n            <span className='note'>{noOptionsSring}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectCity"],"mappings":";;AAAA,OAAOA,MAAM,MAAM,cAAc;AACjC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,iBAAiB,QAAQ,2CAA2C;AAE7E,OAAO,gCAAgC;AAAA;AAGvC,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAAA;EAE1B,MAAMC,cAAc,GAAG,yGAAyG;EAChI,MAAM;IAAEC,IAAI,EAAEC,QAAQ;IAAGC,WAAW,EAAEC,eAAe;IAAEC,SAAS;IAAEC,SAAS;IAAEC;EAAQ,CAAC,GAAGV,iBAAiB,CAAC;IAAE,SAAS,EAAEE,KAAK,CAACS,OAAO;IAAE,OAAO,EAAET,KAAK,CAACU;EAAM,CAAC,CAAC;EAC9J,MAAMC,MAAM,GAAGJ,SAAS,GAAGF,eAAe,GAAGA,eAAe,CAACH,IAAI,GAAGC,QAAQ,CAACD,IAAI,GAAG,EAAE;EACtF,MAAMU,aAAa,GAAG,EAAE;EACxBD,MAAM,CAACE,OAAO,CAACC,IAAI,IAAI;IACnBF,aAAa,CAACG,IAAI,CAAC;MACfC,KAAK,EAAEF,IAAI,CAACG,IAAI;MAChBC,KAAK,EAAEJ,IAAI,CAACG;IAChB,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,MAAME,cAAc,GAAG,mBAAmB;EAG1CtB,SAAS,CAAC,MAAK;IACXW,OAAO,EAAE;EACb,CAAC,EAAC,CAACR,KAAK,CAACS,OAAO,EAAET,KAAK,CAACU,KAAK,CAAC,CAAC;EAE/Bb,SAAS,CAAC,MAAM,CAEhB,CAAC,EAAC,CAACQ,eAAe,EAAEF,QAAQ,CAAC,CAAC;EAG9B,oBACI;IAAA,wBACI;MAAO,OAAO,EAAC,MAAM;MAAA,UAAC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAQ,eAClC;MAAA;MAAA;MAAA;IAAA,QAAM,eACN,QAAC,MAAM;MACH,EAAE,EAAC,MAAM;MACT,SAAS,EAAEG,SAAS,GAAG,IAAI,GAAG,KAAM;MACpC,cAAc,EAAE,MAAMa,cAAe;MACrC,OAAO,EAAEP,aAAc;MACvB,QAAQ,EAAGQ,QAAQ,IAAKpB,KAAK,CAACqB,OAAO,CAACD,QAAQ,CAACJ,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACxD,eACF;MAAM,SAAS,EAAC,MAAM;MAAA,UAAEf;IAAc;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QAC5C;AAEd,CAAC;AAAA,GAvCKF,UAAU;EAAA,QAG6ED,iBAAiB;AAAA;AAAA,KAHxGC,UAAU;AAyChB,eAAeA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}