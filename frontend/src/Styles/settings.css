.settings-icon:hover{
    transform: rotate(-45deg);
    cursor: pointer;
}
.settings-icon{
    display: flex;
    justify-content: center;
    text-align: center;
    transition: .3s;
}
.settings-drop-down{
    position: fixed;
    background-color: whitesmoke;

    height: fit-content;
    width: 200px;
    right: 23px;

    padding: 5px;

    font-weight: bold;

    border-style: solid;
    border-color: gray;
    border-radius: 5px;
}
.settings-drop-down-option{
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    text-align: center;
    font-size: 18px;

    padding: 2px;
    
    border-radius: 5px;
    border-color: #d9d9d9;
    border-width: 1px;
    border-style: solid;
 
    margin-bottom: 5px;
}
.settings-drop-down-option:hover{
    background-color: lightblue;

}
.icon-button:hover{
    cursor: pointer;
}
.icon-button{
    display: flex;
    justify-content: center;
    align-items: center;
    height: fit-content;
}

/*
Used to wrap elements want to prevent events from clicking on them,
For example, wrapping the toggle icons of the settings menu
Since there is hook that turns off the settings menu when clicking outside the elements of the settings menu
If this was not wrapped around the icon, and the icon was clicked, that element would be removed for a new icon
And the new icon would not be contained in the settings menu at that time, thus turning it off (unwanted functionality)
Wrapping the icons in with an element of this class solves this issue because the user clicks the parent element instead of the icon inside
*/
.no-pointer-events{
    pointer-events: none;
}